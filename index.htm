<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="mapscholaricon.ico">
	<title>MapScholar</title>
	<link rel="stylesheet" type="text/css" href="http://www.viseyes.org/shiva/css/smoothness/jquery-ui-1.8.16.custom.css">
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
 	<script type="text/javascript" src='//www.google.com/jsapi?autoload={"modules":[{"name":"visualization","version":"1"}]}'></script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAeGRjMSfeJ3Fgiu_RXntnu2LxuPxrsufU&libraries=places"></script>	
 	<script type="text/javascript" src="lib/shivalib-min.js"></script>
 	<script type="text/javascript" src="MapScholar_Draw.js"></script>
   	<link rel="stylesheet" href="lib/ol.css" type="text/css">
   	<script src="lib/ol-debug.js" type="text/javascript"></script>
   	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small;margin:0px;padding:0px;}
		p.pb { text-align:right; color:#fff; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		.chapterbar { -moz-border-radius:3px;-webkit-border-radius:3px;-khtml-border-radius:3px;border-radius:3px;width:192px;background-color:#999;height:14px;padding:3px;color:#fff}
		.headerbar { border-bottom:1px solid #999;height:14px;width:192px;padding:3px;color:#333 }
		.timelinebar { -moz-border-radius:12px;-webkit-border-radius:2px;-khtml-border-radius:2px;border-radius:2px;background-color:#999 }
		.timelinedot { -moz-border-radius:4px;-webkit-border-radius:4px;-khtml-border-radius:4px;border-radius:4px;background-color:#990000;height:8px;width:8px;margin:0px;padding:0px}
		.playerbar { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;background-color:#ccc;color:#fff }
		.is { border-radius:10px;border:1px solid #999; }
		tr.odd { background-color:#e0e0e0; }
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-weobkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
		.unselectable{-moz-user-select: none;     -khtml-user-select: none;
		   			  -webkit-user-select: none;  -ms-user-select: none;   user-select: none;
		   			 }
		</style>
	
</head>
<body>
	<div id="containerDiv" style="position:absolute;left:20px;top:20px;"></div>
	<div id="shelfDiv" style="position:absolute;width:230px;top:20px;background-color:#eee;"> 
		<br><br><p style='text-align:center;color:#999'><img src='img/MapScholarLogo.png'/><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br<br><br><br><br><br><img src='img/UVALogo.gif' width='80'/><br><br><br>1/17/17</p>
		</div>
	<div id="controlBarDiv" style="position:absolute;height:36px;left:20px;background-color:#eee"> </div>
	<div id="infoPanelDiv" style="display:none;position:absolute;top:20px;border-bottom:1px solid #ccc;border-left:1px solid #ccc;border-right:1px solid #ccc;background-color:#fff"> 
		<div id="infoPanelText" style="position:absolute;left:0px;top:0px;padding:8px;background-color:#fafafa;overflow-x:hidden;overflow-y:auto;border-top:1px solid #ccc;border-right:2px solid #ccc;"> </div> 
	</div>

 <script>

	if ((location.protocol == 'https:') && (window.location.host != "localhost")) location.href = 'http:' + window.location.href.substring(window.location.protocol.length); // FORCE HTTP!

	var mps=null;
	var map=null;
	var shivaLib=null;
	var mapMode="ol";
	var initMob="";
	var	mapWid,mapHgt;
	ResizeMapScholar("dontDraw");
	
	function ResizeMapScholar(drawMode) 
	{
		mapWid=window.innerWidth-270;
		mapHgt=mapWid*.6667;
		if (mapHgt > window.innerHeight-80) {
			mapHgt=window.innerHeight-80;
			mapWid=mapHgt/.6667;
			}
		$("#containerDiv").width(mapWid);
		$("#containerDiv").height(mapHgt);
		$("#shelfDiv").height(mapHgt+36);
		$("#shelfDiv").css("left",(mapWid+20)+"px");
		$("#controlBarDiv").width(mapWid);
		$("#controlBarDiv").css("top",(mapHgt+20)+"px");
		$("#infoPanelDiv").height(mapHgt-1);
		$("#infoPanelText").height(mapHgt-18);
		if (drawMode != "dontDraw") {
			if (map)																
				map.updateSize();													
			mps.sh.Draw();
			}
		}

	function ShivaPostInit()
 	{
		var url=window.location.search.substring(1);						// Get query string
		if (url) {															// Something on query line
			var v=url.split("&");											// Split
			if (v.length > 1) {												// If more than one
				url=v[0];													// Reset url
				initMob=v[1];												// Set init mob
				}
			}
		else																// Nothing on query line
			url="99?";
		if (url.match(/\?/))												// Has a ? param
			url+="&";														// Use &
		else																// Naive
			url+="?";														// Use ?
		url+="unq="+Math.floor(Math.random()*9999);							// Add unique id to thwart caching
		mps.dr.InitEvents();												// Init draw events
		if (url.indexOf("http") != -1) {									// Is a url
			shivaLib.GetSpreadsheet(url,true,null,function(data) {			// Get from docs
				if (!data) {												// No data
					alert("Problem loading spreadsheet! Make sure it is shared to the public and the url is correct");
					return;
					}
				LoadShow(data);												// Init project
				},false,true);												// No headers and send errors
			}
		else{																// An id
			url=url.split("?")[0];											// Lop off unique
		trace(url)
			if (!isNaN(url)) {												// If a number
				url="//www.stagetools.com/qmedia/loadshow.php?id="+url;		// Get from db
				$.ajax({ url: url, dataType:'jsonp' });						// Get jsonp and call LoadShow() from it
				}
			}
		}
		
     $(document).ready(function() {										// ON JQUERY LOADED
		var url=window.location.search.substring(1);						// Get query string
		if (url && url.match(/ge=/))										// If tagged
			mapMode="ge";													// Force mode
		if (url && url.match(/ol=/))										// If tagged
			mapMode="ol";													// Force mode
		mps=new MapScholar(mapMode);										// Main object
		if (window.addEventListener) 										// WC3	
			window.addEventListener("message",shivaEventHandler,false);		// Add listener	
		else																// IE
			window.attachEvent("message",shivaEventHandler);				// Add listener	
		$(window).resize(ResizeMapScholar);									// Dynamic resizing
		});

	function Sound(sound, mode)											// PLAY SOUND
	{
		var snd=new Audio();
		if (!snd.canPlayType("audio/mpeg") || (snd.canPlayType("audio/mpeg") == "maybe")) 
			snd=new Audio(sound+".ogg");
		else	
			snd=new Audio(sound+".mp3");
		if (mode != "init")
			snd.play();
	}
	
	function LoadShow(data)												// ON INIT OR QMF CALL
	{
		var i;
		var m=shivaLib.map;													// Point to map												
		if (mps.geoRef) {													// If geo referncing left open
			if (mps.geoRef.modify)											// If interaction initted													
				map.removeInteraction(mps.geoRef.modify);					// Remove it
			mps.drawLayer.getFeatures().clear();							// Clear existing points
			m.unByKey(mps.geoRef.pDrag)										// Remove drag handler
			m.unByKey(mps.geoRef.pUp)										// Remove mouse up handler
			mps.geoRef=null;												// Clear flag
			}
		if (mps.mm == "ol") {												// OL
			if (mps.kmlLayers) {											// If any KML layera
				for (i=0;i<mps.kmlLayers.length;++i) {						// For each kml
					if (typeof mps.kmlLayers[i].getSource().clear == "function") // If a clear() function
						mps.kmlLayers[i].getSource().clear();				// Clear it
					map.removeLayer(mps.kmlLayers[i]);						// Delete layer
					}
				mps.kmlLayers=[];
				}
			}
		mps.InitProject("",data);											// Init project
		if (mps.mm == "ge") {												// GE
			var features=m.getFeatures();									// Point to features
			while (features.getFirstChild())								// While one
		   		features.removeChild(features.getFirstChild());				// Remove it
			}
		mps.AddMapBoxes();													// Add boxes
		var o=mps.mobs[0];													// Point at first mob
		if (o && o.med  && (o.type == "startup") && (!initMob))				// A startup with an image, but not a link to a direct page
			mps.ShowText(0,true);											// Show title page, if set
	}		
	
	function shivaEventHandler(e)										// ON SHIVA MESSAGE
	{
		if (e.data.indexOf("MapEdit=data") == 0)							// If load
			LoadShow($.parseJSON(e.data.substr(13)));						// String -> JSON
		else if (e.data.indexOf("MapEdit=zoom") == 0)						// If zoom
			map.setView(new ol.View({										// Finer grained zoom view
		          center: ol.proj.transform( [-50,50],'EPSG:4326',mps.curProjection),
		          zoomFactor: 1.25, minZoom: 6, maxZoom: 64, zoom: 24 })
		          );
		else if (e.data.indexOf("MapEdit=mob") == 0)	{					// If mob 
			if (mps.mm == "ge")												// If GE
				mps.dr.ClearSegs();											// Clear existing segs
			if (mps.dr.inDraw)												// If in draw mode
				mps.dr.DrawControlBar(false);								// Go to shelf mode
			mps.sh.SetBookStartEnd();										// Set book start/end
			var id=e.data.substr(12)-0;										// Get id
			if (!mps.mobs[id])												// No mob there
				return;														// Quit
			if (mps.mobs[id].type == "page") {								// If a page
				if (mps.sh.presentMode != "Book")							// If not in book mode
					mps.sh.PresentView({value:"Book"});						// Reset view
		 		mps.sh.HighlightMob("goto"+(id+1-mps.sh.startBook));		// Show page
				}
			else{
				if (mps.sh.presentMode == "Book")							// If in book mode
					mps.sh.PresentView({value:"Atlas"});					// Reset view
				mps.sh.HighlightMob(id);									// Go there
				}
			}
		else if (e.data.indexOf("MapEdit=rectify") == 0)	{				// If rectify 
			if (mps.mm == "ge")												// If GE
				mps.dr.ClearSegs();											// Clear existing segs
			if (e.data.match(/allDone/)) {									// If finished
				if (mps.geoRef) {											// If feo referncing left open
					if (mps.geoRef.modify)									// If interaction initted													
						map.removeInteraction(mps.geoRef.modify);			// Remove it
					mps.drawLayer.getFeatures().clear();					// Clear existing points
					map.unByKey(mps.geoRef.pDrag)							// Remove drag handler
					map.unByKey(mps.geoRef.pUp)								// Remove mouse up handler
					mps.geoRef=null;										// Clear flag
					}
				Sound("ding");												// Ding
				mps.dr.DrawControlBar(false);								// Go to shelf mode
				return;														// Quit
				}
			Sound("ding");													// Ding
			if (mps.mm == "ol") {											// IF OL
				var v=e.data.split("|");									// Get parts
				mps.GeoReferenceMap(v[9]-0);								// Georeference map's mob
				}
			else{															// If GE
				mps.dr.DrawControlBar(true);								// Go to draw mode
				$("#annType").val("Image");									// Set val
				mps.dr.AddNewSeg(e.data);									// Add image
				}
			}

	}

	function SendShivaMessage(src, msg) 								// SEND SHIVA MESSAGE 
	{
		var str=src+"|show";												// Add src and window						
		if (msg)															// If more to it
			str+="|"+msg;													// Add it
		if (window.parent)													// If has a parent
			window.parent.postMessage(str,"*");								// Send message to parent wind
		else																// Local	
			window.postMessage(str,"*");									// Send message to wind
	}


//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN 
/////////////////////////////////////////////////////////////////////////////////////////////////

function MapScholar(mapMode)											// CONSTRUCTOR
{
	mps=this;																// Point to this
	this.mm=mapMode;														// Def map mode is GE
	this.controlKey=this.shiftKey=false;									// Shift/control key flags
	this.showBoxes=false;													// Show boxes
	this.showRoads=false;													// Hide Roads/borders
	this.showScale=(this.mm == "ol");										// Hide or show scale
	this.popupOpen=-1;														// Popup not open
	shivaLib=new SHIVA_Show("containerDiv");								// Alloc SHIVA_Show
	Sound("click","init");													// Init sound
	Sound("ding","init");													// Init sound
	Sound("delete","init");													// Init sound
	this.dr=new MapScholar_Draw();											// Alloc draw module
	this.sh=new MapScholar_Shelf();											// Alloc shelf module
	this.loadCounter=0;														// Images/KMLs to load
	
	if (this.mm == "ge") {													// If using GE
		shivaLib.ShivaEventHandler("init");									// Init shiva event listener
		shivaLib.options={ 	shivaGroup:"Earth", height:mapHgt, width:mapWid, 
	 						mapcenter:"33,-85", range:"15000000", tilt:"0", heading:"0",
	 						panControl:"true", draggable:"true", scrollwheel:"true", overviewMapControl:"false",
	 						terrainexag:"1", borders:"false", roads:"false"
	 						};
		shivaLib.Draw(shivaLib.options);									// Draw map
		}

	else if (this.mm == "ol") {												// If using OL
		this.curProjection="EPSG:3857";										// Current projection
		this.baseLayer="Satellite";											// Default layer
		this.layers=[														// Hold layers
			new ol.layer.Tile({												// Sat 
					visible: false,											// Invisible
	   				source: new ol.source.BingMaps({						// Bing
     				key: 'Avsv5vFZCgNtp6DYSf4dVOx_TG6ZREK9ivsaGcjebscLVe5EcC2078H3YmLNRncB',
    					imagerySet:"Aerial"
     					}),
					projection: this.curProjection,							// Default projection
					title: "Satellite"										// Set name
					}),
			new ol.layer.Tile({												// Terrain
					visible: false,											// Invisible
    				source: new ol.source.TileWMS({							// WMS
     						url: 'http://demo.opengeo.org/geoserver/wms',	// Url
     						params: { 'LAYERS': 'ne:NE1_HR_LC_SR_W_DR' }	// Params
    						}),
					projection: this.curProjection,							// Default projection
					title: "Terrain"										// Set name
					}),
			new ol.layer.Tile({												// Watercolor
					visible: false,											// Invisible
					source: new ol.source.Stamen({layer: 'watercolor'}),	// Stamen watercolor
					projection: this.curProjection,							// Default projection
					title: "Watercolor"										// Set name
					}),
			new ol.layer.Tile({												// Toner
					visible: false,											// Invisible
					source: new ol.source.Stamen({layer: 'toner-lite'}),	// Stamen toner
					projection: this.curProjection,							// Default projection
					title: "B&W"											// Set name
					}),
			new ol.layer.Tile({												// Earth
					visible: false,											// Invisible
  					source: new ol.source.TileJSON({
        				url: 'http://api.tiles.mapbox.com/v3/' +
            			'mapbox.natural-earth-hypso-bathy.jsonp',
        				crossOrigin: 'anonymous'
   						}),
 					projection: this.curProjection,							// Default projection
  					title: "Earth"											// Set name
					}),
			
			new ol.layer.Tile({												// Roadmap
					visible:false,											// Hide it
	  				source: new ol.source.OSM(),							// OSM
					projection: this.curProjection,							// Default projection
					title: "Roadmap"										// Set name
 					}),
			];
	
			this.featureSelect=new ol.interaction.Select();					// Create select interaction

		    map=shivaLib.map=new ol.Map( { target: 'containerDiv',			// Alloc OL
  				interactions: ol.interaction.defaults().extend([this.featureSelect]),	// Add feature select interaction
		        layers:this.layers,											// Layers array									
		        controls: ol.control.defaults({								// Controls
 						}).extend([ new ol.control.ScaleLine() ]),			// Add scale
		        view: new ol.View({											// Views
		          		center: ol.proj.transform( [-50,50],'EPSG:4326',this.curProjection),
//		          		zoomFactor: 1.25, minZoom: 6, maxZoom: 64, zoom: 24 }),
//		          		minZoom: 2, maxZoom: 16, zoom: 6 })
 		          		zoomFactor: 1.25, minZoom: 6, maxZoom: 72, zoom: 24 })
 				});
      
	       	this.CreateCanvasLayer();										// Canvas layer for map images
			this.boxLayer=new ol.layer.Vector({ source: new ol.source.Vector({ projection: 'EPSG:4326'}) }); 	// Create box layer
			map.addLayer(this.boxLayer);									// Add to map	
										
		   	for (i=0;i<this.layers.length;++i) 								// For each layer
			    this.layers[i].set('visible',this.layers[i].get("title") == this.baseLayer); // Set visibility

	      	mps.featureSelect.getFeatures().on("change:length", function(e) {	// ON FEATURE SELECT
				var i,j,f;
	  			if (e.target && e.target.item(0)) {							// If something there
					f=e.target.item(0);										// Point at seg
					var id=f.getId();										// Id of seg
					if (f.getGeometry() && (f.getGeometry().getType() == "Point") && f.getStyle() && f.getStyle().getText())	// If a text label in seg, must be marker text
						$("#annText").val(f.getStyle().getText().getText())	// Fill editing box for marker
					
					for (i=0;i<mps.kmlLayers.length;++i) {					// For each KML layer
						if (!mps.kmlLayers[i].getSource().getFeatures)		// If no source features
							continue;
						f=mps.kmlLayers[i].getSource().getFeatures();		// Get KML feature array
						if (!f || !f.length)								// If no KML features
							continue;										// Quit
						for (j=0;j<f.length;++j) {							// For each feature 
							if (f[j].getId() == id) {						// Found it
								$("#mpsFind").val(j);						// Show id in Find: box
									return;
								}
							}												// End feature
						}													// End layer
					}														// End got one
  				});

			map.on('moveend', function(e) {									// On end of move
              	mps.DrawMapImages();										// Redraw maps in new extent, if moved
				var o=map.getView();										// Point at view
				var c=ol.proj.transform(ValidCenter(o.getCenter()),mps.curProjection,'EPSG:4326');		// Get center
				var pos=Math.floor(c[1]*10000)/10000+"|"+Math.floor(c[0]*10000)/10000+"|"+Math.floor(ResolutionToRange(o.getResolution(),mapWid));	
				pos+="|0|"+Math.floor((o.getRotation()*180/Math.PI)*1000)/-1000;		// Rotation
				SendShivaMessage("ShivaEarth=move",pos);					// Send that view has changed
 				});
	
			map.on('click',function(e) {									// ON MAP CLICK
				map.forEachFeatureAtPixel(e.pixel,function(f) {				// Look at features
					var id;
					if (f && (id=f.getId())) {								// If a feature with an id
						if (id.match(/mapBox/)){							// A map box
							Sound("click");									// Click
							mps.sh.HighlightMob(f.getId().substr(6),e.originalEvent.shiftKey,true);	// Highlight mob
	   						}
	   					}													// End feature w/ id
			   		})														// End each feature											
				});															// End click
			
	 		ShivaPostInit();
	 		}	
}	

MapScholar.prototype.InitProject=function(url, data)					// INIT PROJECT 
{
	var i,o,m;
	this.loadCounter=0;														// Reset mages/KMLs to load
	this.mobs=new Array();													// Holds map objects data
	if (data) {																// If loading from data
		for (i=0;i<data.length;++i) { 										// For each row
			if (data[i].url)   data[i].url=data[i].url.trim();				// Trim whitespace
			if (data[i].med)   data[i].med=data[i].med.trim();				// Trim whitespace
			if (data[i].small) data[i].small=data[i].small.trim();			// Trim whitespace
			if (data[i].type == "timeline") 								// A timeline command
				mps.sh.showTimeline=(data[i].status == "on");				// Set flag
			else if (data[i].type)											// Normal command
				this.mobs.push(data[i]);									// Add new mob to project
			}
		this.dr.DrawControlBar(false);										// Draw control bar and shelf
		o=this.mobs[0];														// Point at 1st mob
		if (o.status && (o.type == "startup")) { 							// Startup mob
			if (o.status.match(/book/i))									// If book
				this.sh.PresentView({value:"Book"});						// Reset view
			else if (o.status.match(/slides/i))								// If slides
				this.sh.PresentView({value:"Slides"});						// Reset view
			if (o.status.match(/boxes.*on/i)) {								// If set, boxes on
				mps.showBoxes=true;											// Set flag
				mps.ShowMapBoxes(-1,"on");									// Set boxes
				}
			else if (o.status.match(/boxes.*off/i)) {						// If set, boxes off
				mps.showBoxes=false;										// Set flag
				mps.ShowMapBoxes(-1,"off");									// Set boxes
				}
			if (o.status.match(/scale/i)) {									// If set on on
				mps.showScale=true;											// Set var
				mps.ShowMapScale(mps.showScale);							// Show scale
				}
			if (m=o.status.match(/base.?(\S+)\s*/)) {						// Base tag
				mps.baseLayer=m[1];											// Set it
				mps.ShowMapLayers(mps.baseLayer);							// Show layer
				}
			}
		mps.sh.HighlightMob(o.type == "startup" ? 1 : 0,false,true);		// Show first content mob
		if (o.goto && (o.type == "startup"))								// If a goto in startup mob
			this.Goto(o.goto);												// Go to 1st pos
		if (initMob && initMob.match(/p=/)) {								// Go to a page?
			mps.sh.PresentView({value:"Book"});								// Book view
 			mps.sh.HighlightMob("goto"+initMob.substr(2));					// Show page
 			mps.sh.HighlightMob(mps.sh.firstPageMob);						// Show first mob		
			}
		if (initMob && initMob.match(/m=/)) {								// Go to a map?
			mps.sh.PresentView({value:"Atlas"});							// Atlas view
	 		var val=mps.FindMobByID(initMob.substr(2));						// Id -> index
	 		mps.sh.HighlightMob(-val);										// Show mob
 			}
		return;
		}
}

MapScholar.prototype.AddNewMob=function(mob)							// ADD NEW MAP OBJECT TO PROJECT
{
	this.mobs.push($.extend(true,{},mob));									// Copy new mob  to project
}

MapScholar.prototype.FindMobByID=function(id)							// FIND MAP OBJECT INDEX BY ID
{
	var i;
	for (i=0;i<this.mobs.length;++i)										// For each mob
		if (id == this.mobs[i].id)											// If matched
			return i;														// Return index
	return -1;																// Not found
}

MapScholar.prototype.ShowHelp=function(context)							// SHOW HELP
{
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// EARTH CONTROL
/////////////////////////////////////////////////////////////////////////////////////////////////

MapScholar.prototype.AddMapBoxes=function()								// ADD MAP WIREFRAMES
{
	var i,m;
	var x,y,cx,cy,x1,y1,lx,ly,ar,sin,cos;
	if (mps.mm == "ol") {													// OL
	 	for (i=0;i<this.mobs.length;++i) {									// For each seg
			var r=[[0,0],[0,0],[0,0],[0,0],[0,0]];							// Init coords
			m=this.mobs[i];													// Point at mob
			if (m.type != "map")											// If not a map
				continue;													// Continue
			if (!m.north)													// No georefereced
				continue;													// Continue
			var p1=ol.proj.transform([m.west-0,m.north-0],'EPSG:4326',this.curProjection);	// Transform
			var p2=ol.proj.transform([m.east-0,m.south-0],'EPSG:4326',this.curProjection); // Transform
			ar=m.rotation*(Math.PI/180);									// Angle to radians
			sin=Math.sin(ar);												// Get sine
			cos=Math.cos(ar);												// Get cosine
			cx=((p2[0]-p1[0])/2)+(p1[0]-0);									// Center x
			cy=((p2[1]-p1[1])/2)+(p1[1]-0);									// Center y
			lx=cx+(p1[0]-cx)*cos-(p1[1]-cy)*sin;							// Rotate x
			ly=cy+(p1[0]-cx)*sin+(p1[1]-cy)*cos;							// Rotate y
			r[0][0]=cx+(p1[0]-cx)*cos-(p1[1]-cy)*sin;						// Rotate x
			r[0][1]=cy+(p1[0]-cx)*sin+(p1[1]-cy)*cos;						// Rotate y
			r[1][0]=cx+(p2[0]-cx)*cos-(p1[1]-cy)*sin;						// Rotate x
			r[1][1]=cy+(p2[0]-cx)*sin+(p1[1]-cy)*cos;						// Rotate y
			r[2][0]=cx+(p2[0]-cx)*cos-(p2[1]-cy)*sin;						// Rotate x
			r[2][1]=cy+(p2[0]-cx)*sin+(p2[1]-cy)*cos;						// Rotate y
			r[3][0]=cx+(p1[0]-cx)*cos-(p2[1]-cy)*sin;						// Rotate x
			r[3][1]=cy+(p1[0]-cx)*sin+(p2[1]-cy)*cos;						// Rotate y
			r[4]=r[0];														// Last
			var f=new ol.Feature(new ol.geom.LineString(r));				// Make line
			f.setId("mapBox"+i);											// Add id
			this.boxLayer.getSource().addFeature(f);						// Add it
			}
		this.AddMapImages();												// Add images
		this.ShowMapBoxes(-1,"on");											// Show only open ones											
		return;																// Quit
		}
	var j,coords,seg,sty;
	var ge=shivaLib.map;													// Point to earth												
    var folder=ge.createFolder("mywireframes"+Math.floor(Math.random()*99999999));	// Create folder
    ge.getFeatures().appendChild(folder);									// Add folder to EDOM
 	for (i=0;i<this.mobs.length;++i) {										// For each seg
		m=this.mobs[i];														// Point at mob
		if (m.type != "map")												// If not a map
			continue;														// Skip
		ar=m.rotation*(Math.PI/180);										// Angle to radians
		sin=Math.sin(ar);													// Get sine
		cos=Math.cos(ar);													// Get cosine
		m.gid="WIRE-"+Math.floor(Math.random()*99999999);					// Make random #
		coords=ge.createLineString('');										// Holds coords
		seg=ge.createPlacemark(m.gid);										// Create holder
		seg.setVisibility(false);											// Hide it
		seg.setStyleSelector(ge.createStyle(''));							// Create style
		seg.setGeometry(coords);											// Set coords in seg
		folder.getFeatures().appendChild(seg);								// Add seg to folder
		cx=((m.east-m.west)/2)+(m.west-0);									// Center x
		cy=((m.south-m.north)/2)+(m.north-0);								// Center y
		lx=cx+(m.west-cx)*cos-(m.north-cy)*sin;								// Rotate x
		ly=cy+(m.west-cx)*sin+(m.north-cy)*cos;								// Rotate y
		x=cx+(m.east-cx)*cos-(m.north-cy)*sin;								// Rotate x
		y=cy+(m.east-cx)*sin+(m.north-cy)*cos;								// Rotate y
		for (j=0;j<=8;++j) {												// Bisect line
			x1=lx+(x-lx)/8*j;												// Center x
			y1=ly+(y-ly)/8*j;												// Center y
			coords.getCoordinates().pushLatLngAlt(y1,x1,0);					// Add point
			}
		lx=x1;	ly=y1;														// Then is now
		x=cx+(m.east-cx)*cos-(m.south-cy)*sin;								// Rotate x
		y=cy+(m.east-cx)*sin+(m.south-cy)*cos;								// Rotate y
		for (j=0;j<=8;++j) {												// Bisect line
			x1=lx+(x-lx)/8*j;												// Center x
			y1=ly+(y-ly)/8*j;												// Center y
			coords.getCoordinates().pushLatLngAlt(y1,x1,0);					// Add point
			}
		lx=x1;	ly=y1;														// Then is now
		x=cx+(m.west-cx)*cos-(m.south-cy)*sin;								// Rotate x
		y=cy+(m.west-cx)*sin+(m.south-cy)*cos;								// Rotate y
		for (j=0;j<=8;++j) {												// Bisect line
			x1=lx+(x-lx)/8*j;												// Center x
			y1=ly+(y-ly)/8*j;												// Center y
			coords.getCoordinates().pushLatLngAlt(y1,x1,0);					// Add point
			}

		lx=x1;	ly=y1;														// Then is now
		x=cx+(m.west-cx)*cos-(m.north-cy)*sin;								// Rotate x
		y=cy+(m.west-cx)*sin+(m.north-cy)*cos;								// Rotate y
		for (j=0;j<=8;++j) {												// Bisect line
			x1=lx+(x-lx)/8*j;												// Center x
			y1=ly+(y-ly)/8*j;												// Center y
			coords.getCoordinates().pushLatLngAlt(y1,x1,0);					// Add point
			}
		sty=seg.getStyleSelector().getLineStyle();							// Get line style
		sty.setWidth(1);													// Set width	
		sty.getColor().set("ff00ffff");  									// Set color in aabbggrr format
		}
	this.AddMapImages();													// Add images
	this.ShowMapBoxes(-1,"on");												// Show only open ones											
}

MapScholar.prototype.AddMapImages=function()							// ADD MAP IMAGES
{
	var i,m;
	var n=this.mobs.length;
	var mobs=this.mobs														// Point at mobs
	if (this.mm == "ol") {													// If OL
		this.kmlLayers=[];
		for (i=0;i<n;++i) {													// For each seg
			m=this.mobs[i];													// Point at mob
			if (m.type == "map") {											// Map 
			    this.MakeMapImage(m);										// Add it 
				this.loadCounter++;											// Add to load count
				}
			else if (m.type == "layer") {									// If a layer
//if (m.url.match(/553/)) m.url="test.kml"				
				
				m.mid="LAYER-"+this.kmlLayers.length;						// Make id
				if (m.url.match(/\.kml|\.kmz|getkml\.php|getkml2\.php/i)) {	// KML file
					this.kmlLayers.push(new ol.layer.Vector({  source: new ol.source.KML({	// New layer
							title: "LAYER-"+i,								// Set name
				   			projection: ol.proj.get(mps.curProjection),		// Set KML projection
				    		url:"proxy.php?url="+m.url,						// Proxied URL
//url:m.url,						
				  			visible:false									// Hide it
				  			})
						}));
				this.kmlLayers[this.kmlLayers.length-1].getSource().once("change",function() {	// WHEN KML IS LOADED						
					this.forEachFeature(function(f) {						// For each feature in KML
						if ((f.getGeometry().getType() == "Point") && f.get("name")){	// If a marker with a label
							var sty=new ol.style.Style({					// Add style
 						      image: new ol.style.Icon( { src: "img/marker.png"	}),	// Add icon
   						      text:	new ol.style.Text( {					// Text style
							    	textAlign: "left", textBaseline: "middle",	// Set alignment
							    	font: "bold 14px Arial",				// Set font
							    	text: f.get("name"),					// Get label
							   	 	fill: new ol.style.Fill({color: "#fff" }),	// Set color
									stroke: new ol.style.Stroke( { color: "#000",width: 1 }),	// Set edge		   
							    	offsetX: 16								// Set offset
							 		})
								});
								f.setStyle(sty);							// Set style to show label	
								}
							});
					});
				
					}
				else{														// Tiles image
					this.kmlLayers.push(new ol.layer.Tile({  source: new ol.source.XYZ({	// New layer
							title: "LAYER-"+i,								// Set name
		  					projection: ol.proj.get(mps.curProjection),		// Set KML projection
							url: m.url,										// URL
		    				visible:false									// Hide it
		  					})
						}));
					}
				shivaLib.map.addLayer(this.kmlLayers[this.kmlLayers.length-1]);	// Add to map	
				}
			else if (m.type == "choro") {									// If a choropleth
				m.mid="CHORO-"+Math.floor(Math.random()*99999999);			// Make random #
				if (m.url.match(/http/)) {									// If a valis url
					shivaLib.GetSpreadsheet(m.url,false,"",function(data,url){	// Get from docs
					for (var j=0;j<mps.mobs.length;++j) 					// For each seg
						if (mps.mobs[j].url == url)							// If a match
							break;											// Quit looking
						mps.mobs[j].url=data;								// Save data to url
						},true);
					}
				}
			}
		return;
		}
	
	var latLonBox,icon,seg;
	var ge=shivaLib.map;													// Point to earth												
	for (i=0;i<n;++i) {														// For each seg
		m=this.mobs[i];														// Point at mob
		if (m.type == "layer") {											// If a layer
			m.mid="LAYER-"+Math.floor(Math.random()*99999999);				// Make random #
			google.earth.fetchKml(ge,m.url,function(seg) {					// Get KML
    			if (!seg) {													// Failed
			    	setTimeout(function(){},0);								// Clear timeout
		     		console.log("Failed KML load of "+m.url);				// Show error
		     		return;													// Quit
		     		}
				var url=""+(seg.getUrl().split("#")[0]);					// Get fetched url, lop off #????
				for (var j=0;j<n;++j) 										// For each seg
					if (mobs[j].url == url)									// If a match
						break;												// Quit looking
				mobs[j].seg=seg;											// Save ptr to seg
				ge.getFeatures().appendChild(seg);							// Add it to display list
 				var str=seg.getKml().toString();							// Get kml
				seg.setVisibility(false);									// Hide it
	    		});	
			}
		if (m.type == "choro") {											// If a choropleth
			m.mid="CHORO-"+Math.floor(Math.random()*99999999);				// Make random #
			if (m.url.match(/http/)) {										// If a valis url
				shivaLib.GetSpreadsheet(m.url,false,"",function(data,url){	// Get from docs
				for (var j=0;j<mps.mobs.length;++j) 						// For each seg
					if (mps.mobs[j].url == url)								// If a match
						break;												// Quit looking
					mps.mobs[j].url=data;									// Save data to url
					},true);
				}
			}
		if (m.type != "map")												// If not a map
			continue;														// Continue
		m.mid="MAP-"+Math.floor(Math.random()*99999999);					// Make random #
		seg=ge.createGroundOverlay(m.mid);									// Create holder
		latLonBox=ge.createLatLonBox('');									// Create box
		latLonBox.setBox(m.north-0,m.south-0,m.east-0,m.west-0,m.rotation-0);	// Set coords
		seg.setLatLonBox(latLonBox);										// Set geometry
		icon=ge.createIcon('');												// Create icon
		if (m.med)															// If a medium available
			icon.setHref(m.med);											// Set url
		else if (m.url)														// If a large
			icon.setHref(m.url);											// Set url
		else if (m.small)													// If a small
			icon.setHref(m.small);											// Set url
		seg.setAltitudeMode(ge.ALTITUDE_CLAMP_TO_GROUND);
		seg.setAltitude(0);
		seg.setDrawOrder(-1);												// Allow overlays on it
		seg.setIcon(icon);													// Attach to seg
		seg.setVisibility(false);											// Hide it
		ge.getFeatures().appendChild(seg);									// Add seg to EDOM
		}
}

MapScholar.prototype.SetHiResMapImage=function(num)						// ADD HI-RES MAP
{
	var ge=shivaLib.map;													// Point to earth												
	var	m=this.mobs[num];													// Point at mob
	if ((!m)|| (m.type != "map"))											// Not there
		return;																// Quit
	if (!m.url)																// If exists
		return;																// Quit
	if (this.mm == "ol") {													// OL
		m.mapImage.img.src=m.url;											// Set url
		map.render();														// Force render
		}
	else{																	// GE
		var seg=ge.getElementById(m.mid);									// Get object
		seg.getIcon().setHref(m.url);										// Set url
		}
}

MapScholar.prototype.ShowMapImages=function(num)						// HIDE/SHOW MAPS
{
	var i,seg=null,m;
	var ge=shivaLib.map;													// Point to earth												
	var start=num,end=num-0+1;												// Assume one
	if (num < 0)															// If doing all
		start=0,end=this.mobs.length;										// Whole list
	for (i=start;i<end;++i) {												// For each seg
		m=this.mobs[i];														// Point at mob
		if (!m.mid)															// If no id yet
			continue;														// Skip
		if (this.mm == "ol") {												// OL
			seg=null;
			if (m.type == "map")  											// If a map 
				seg=null;
			else if (m.type == "layer") { 									// If a layer 
				seg=this.kmlLayers[m.mid.substr(6)];						// Point at layer
				if (seg)													// If a valid seg
					seg.set('visible',false);								// Hide it
				}
			continue;
			}
		if (((m.type != "map") && (m.type != "layer") && (m.type != "choro")) || !(m.mid))// If not a map, layer, choro
			continue;														// Continue
		if (m.type == "layer")												// If a layer
			seg=m.seg;														// Get seg from saved seg
		else																// A map
			seg=ge.getElementById(m.mid);									// Get object
		if (seg)															// If not there yet
			seg.setVisibility(false);										// Hide it
		}
	for (i=start;i<end;++i) {												// For each seg
		m=this.mobs[i];														// Point at mob
		if (((m.type != "map") && (m.type != "layer") && (m.type != "choro")) || !(m.mid))// If not a map, layer, choro
			continue;														// Continue
		if (this.mm == "ol") {												// OL
			if (mps.sh.mobVis[i]) {											// If visible
				if (m.type == "map")  										// If a map 
					seg=null;
				else if (m.type == "layer")									// If a layer
					seg=this.kmlLayers[m.mid.substr(6)];					// Point at layer
				else if (m.type == "choro") {								// If a choro
					var b=(""+m.base).split(",");							// Get bases array
					if (b && b.length)										// If one
						b=b[b.length-1];									// Get last one
					b=mps.FindMobByID(b);									// Get index from id
					if (b != -1)											// If a valid base set
						seg=this.kmlLayers[this.mobs[b].mid.substr(6)];		// Point at base kml of features
					this.SetChoroplethFeatures(seg,m.url,m.med,false);		// Set features
					}
				if (seg) {													// If valid seg
					seg.set("opacity",mps.sh.mobVis[i]/100);				// Set alpha
					seg.set('visible',true);								// Show it
					}
				}
				continue;
			}
		if (!m.west)														// If not west set, must be a poster
			this.SetPoster(i);												// Reset coords
		if (m.type == "layer")												// If a layer
			seg=m.seg;														// Get seg from saved seg
		else																// A map
			seg=ge.getElementById(m.mid);									// Get object
		if (m.type == "choro") {											// If a choropleth
			var b=(""+m.base).split(",");									// Get bases array
			if (b && b.length)												// If one
				b=b[b.length-1];											// Get last one
			b=mps.FindMobByID(b);											// Get index from id
			if (b != -1)													// If a valid base set
				seg=this.mobs[b].seg;										// Use layer's saved seg
			if (mps.sh.mobVis[i])											// If visible
				this.SetChoroplethFeatures(seg,m.url,m.med,false);			// Set features
			}
		if ((mps.sh.mobVis[i]) && (seg)) {									// If active
			seg.setOpacity(mps.sh.mobVis[i]/100);							// Set alpha
			seg.setVisibility(true);										// Show it
			} 
		}
	if (this.mm == "ol") { 													// OL
		this.DrawMapImages();												// Draw map images
		shivaLib.map.render();												// Force render
		}
}

MapScholar.prototype.ShowMapLayers=function(val)				// HIDE/SHOW ROADS/BORDER
{
	var i;
	var m=shivaLib.map;														// Point to map												
	if (this.mm == "ge") {													// GE
		m.getLayerRoot().enableLayerById(m.LAYER_BORDERS,val);				// Set borders
		m.getLayerRoot().enableLayerById(m.LAYER_ROADS,val);				// Set roads
		}
	else if (this.mm == "ol") {												// OL
    	for (i=0;i<this.layers.length;++i) 									// For each layer
	    	this.layers[i].set('visible',this.layers[i].get("title") == val); // Turn on/off layer
		}
}

MapScholar.prototype.ShowMapScale=function(mode)						// HIDE/SHOW MAP SCALE
{
	if (this.mm == "ge") 													// GE
		shivaLib.map.getOptions().setScaleLegendVisibility(mode);			// Set scale
	else if (this.mm == "ol") 												// OL
		$(".ol-scale-line").css("visibility",mode ? "visible" : "hidden");	// Hide show scale
}

MapScholar.prototype.SetChoroplethFeatures=function(seg, features, query, hide) // SET CHOROPLETH FEATURES
{
	var i,j,s,d,a,c,o;
 	var range=[];
 	if (!seg || !features)													// If invalid seg or nor features
 		return;																// Quit
	if (mps.mm == "ge") {													// If GE
		var f=seg.getFeatures().getChildNodes();							// Point at seg 
		if (f.item(0).getType() == "KmlFolder")								// If a folder
			f=f.item(0).getFeatures().getChildNodes();						// Recurse into it
		}
	if (typeof(features) == "string") {										// If set literally
		if (features.match(/http/))											// If data still not loaded
			return;															// Quit
		if (features.charAt(features.length-1) == ";")						// If a trailing ;
			features=features.substring(0,features.length-1);				// Lop it off
		features=features.split(";");										// Divide into features array
		for (i=0;i<features.length;++i)										// For each feature
			features[i]=features[i].split(",");								// Split by comma
		features.splice(0,0,["id","opacity","col","ecol","ewid"]);			// Add default header
		}
	if (query)	{															// If a query spec'd
		var results=[];														// Blank array
		a=query;															// Copy query
		d="";																// No extra field that RANGE might need
		if (a.match(/ CLEAR/)) {											// If has clear tag
			hide=true;														// Add clear elements
			a=a.replace(/ CLEAR/,"");										// Remove tag
			}
		if (a.match(/RANGE/)) {												// If has range
			d=a.match(/(^.+)\s+RANGE\s+(.+?)\s+/i);							// Isolate query and field
			c=a.substr(d[0].length).split(";");								// Get range(s)
			a=d[1];															// Set query
			d="+"+d[2];														// Set extra field
			}
		shivaLib.Query(features,results,a,"id+opacity+col+ecol+ewid"+d);	// Run it
		features=results;													// Copy to features	
		if (d) {															// If a range set
			for (i=0;i<c.length;++i) {										// For each range
				o={};														// Reset
				d=c[i].match(/(-*\d+)\s*-\s*(-*\d+)\s*=\s*(.+)/);			// Split parts
				o.min=d[1]-0;												// Min
				o.max=d[2]-0;												// Max
				d=d[3].split(",");											// Values
				o.a=d[0]-0;													// Alpha
				o.c=o.e=o.w="";												// Null out
				if (d[1])	o.c=d[1];										// Col
				if (d[2])	o.e=d[2];										// eCol
				if (d[3])	o.w=d[3]-0;										// Wid
				range.push(o);												// Add to array
				}
			for (i=1;i<features.length;++i) {								// For each feature past header
				o=features[i];												// Point at feature
				for (j=0;j<range.length;++j) {								// For each range
					if ((o[5] >= range[j].min) && (o[5] < range[j].max)) {	// If in range
						o[1]=range[j].a;									// Alpha 
						o[2]=range[j].c;	 								// Col
						o[3]=range[j].e;	 								// eCol
						o[4]=range[j].w;	 								// Wid
						}
					}
				}
			}
		}
	
	if (mps.mm == "ol") {													// If OL
		var fr,fg,fb,sr,sg,sb,a,w;
		var fa=seg.getSource().getFeatures();								// Get KML feature array
		if (!fa || !fa.length)												// If no KML features
			return;															// Quit
		if (hide) {															// If hiding
			sty=new ol.style.Style({										// Create style
		  		fill:   new ol.style.Fill({ color: [0,0,255,0] }),			// Fully transparent fill
		  		stroke: new ol.style.Stroke({ color: [0,0,255,0] }),		// Fully transparent stroke
		   		});
			for (i=0;i<fa.length;++i) 										// For each feature in kml
				if (fa[i])													// If valid feature
					fa[i].setStyle(sty);									// Hide it
			}
		for (i=1;i<features.length;++i)	{									// For each feature to style
			o=features[i];							 	 			 	 	// Point at feature data
			f=fa[o[0]];														// Point at KML feature
			if (!f)															// No feature
				continue;													// Skip it
			
			w=1;
			a=1;
			sr=255;	sg=255;	sb=255;
			fr=255;	fg=0;	fb=0;

			if (o && o[1])													// If alpha set
				a=o[1]/100;													// Convert 0-100 to 0-1
			if (o && o[2]) {												// If fill set
				fr=parseInt("0x"+o[2].substr(0,2),16);						// R
				fg=parseInt("0x"+o[2].substr(2,2),16);						// G
				fb=parseInt("0x"+o[2].substr(4,2),16);						// B
				}
			if (o && o[3]) {												// If line col set
				sr=parseInt("0x"+o[3].substr(0,2),16);						// R
				sg=parseInt("0x"+o[3].substr(2,2),16);						// G
				sb=parseInt("0x"+o[3].substr(4,2),16);						// B
				}
			if (o && o[4] != undefined) 									// If line wid set
				w=o[4]-0;													// Set wid
			sty=new ol.style.Style({										// Create style
		     	stroke: new ol.style.Stroke({ color: [sr,sg,sb,a], width: w }),
		  		fill: new ol.style.Fill({ color: [fr,fg,fb,a] })
		   		});
			f.setStyle(sty);												// Set feature
			}
		return;
		}
	
	if (hide) {
		var n=f.getLength();												// Get number of features
		for (i=0;i<n;++i)													// For each feature
			features.splice(1,0,[i,0,"000000","000000",0]);					// Add hider
		}
	for (i=1;i<features.length;++i) {										// For each feature
		o=features[i];							 	 			  	 	  	// Point at data data
		s=f.item(o[0]-0).getComputedStyle(); 				 	 	 		// Get style
		a=Math.round(o[1]*2.55).toString(16);								// Convert 0-100 to 0-ff
		if (a == "0")	a="00";
		if ((o[2]) || (a == "00")) {		  	 	 				 		// If setting
			c=a+o[2].substr(4,2)+o[2].substr(2,2)+o[2].substr(0,2);			// Reorder guns
			s.getPolyStyle().getColor().set(c);								// Set it
			}
		if ((o[3]) || (a == "00")) {		  	 	 				 		// If setting
			c=a+o[3].substr(4,2)+o[3].substr(2,2)+o[3].substr(0,2);			// Reorder guns
			s.getLineStyle().getColor().set(c);								// Set it
			}
		if ((o[4] != undefined) || (a == "00"))		  	 	 				// If setting
			s.getLineStyle().setWidth(o[4]-0);								// Set it
		}
}

MapScholar.prototype.ChoroQuery=function(query, color)					// SHOW RESULTS OF QUERY ON CHOROPLETH
{
	var i,seg;
	var str="";
	if ((mps.sh.curMob == -1) || (mps.mobs[mps.sh.curMob].type != "choro"))	// If not a choro
			return;															// Quit
	var o=mps.mobs[mps.sh.curMob];											// Point at mob
	if (mps.mm == "ge") {													// If GE
		seg=mps.mobs[mps.FindMobByID(o.base)].seg;							// Get seg from saved seg of base
		var f=seg.getFeatures().getChildNodes();							// Point at seg 
		if (f.item(0).getType() == "KmlFolder")								// If a folder
			f=f.item(0).getFeatures().getChildNodes();						// Recurse into it
		f=f.getLength();													// Get number of features
		for (i=0;i<f;++i)													// For each feature
			str+=i+",50,cccccc,000000,1;";	// Make it bland
		}
	else if (mps.mm == "ol") {												// If OL
		seg=(""+o.base).split(",");											// Get base array
		seg=mps.FindMobByID(seg[seg.length-1]-0);							// Point at last base index id and get index
		seg=mps.mobs[seg].mid.substr(6)-0;									// Get id
		seg=mps.kmlLayers[seg];												// Get seg
		var fa=seg.getSource().getFeatures();								// Get KML feature array
		if (!fa || !fa.length)												// If no KML features
			return;															// Quit
		for (i=0;i<fa.length;++i)											// For each feature to style
			str+=i+",50,cccccc,000000,1;";									// Make it bland
		}
	mps.SetChoroplethFeatures(seg,str,null,false);							// Set feature
	var results=[];															// Blank array
	var features=o.url;														// Point at data
	if (typeof(o.url) == "string") {										// If set literally
		if (features.match(/http/))											// If data still not loaded
			return;															// Quit
		features=features.split(";");										// Divide into features array
		for (i=0;i<features.length;++i)										// For each feature
			features[i]=features[i].split(",");								// Split by comma
		features.splice(0,0,["id","opacity","col","ecol","ewid"]);			// Add default header
		}
	shivaLib.Query(features,results,query,"id+opacity+col+ecol+ewid");		// Run it
	str="";																	// Clear
	for (i=1;i<results.length;++i)											// For each match
		str+=results[i][0]+",50,"+color+",ffffff,2;";						// Make it stand out
	mps.SetChoroplethFeatures(seg,str,null,false);							// Set feature
}

MapScholar.prototype.ShowMapBoxes=function(num, mode, group)			// HIDE/SHOW WIREFRAMES
{
	var i,seg,m,sty;
	var ge=shivaLib.map;													// Point to earth												
	var start=num,end=num-0+1;												// Assume one
	if (this.mm == "ol") {													// If OL
		var styleOn = new ol.style.Style({ 									// Box line style
			stroke: new ol.style.Stroke({ width: 2, color: "#ffff00" })		// Yellow line
			});
	  	var styleOff = new ol.style.Style({ stroke: null	});				// No line
		}
	if (group && (this.mm == "ol")) {										// If a group of mobs specified								
		for (i=0;i<this.mobs.length;++i) {									// For each mob
			seg=this.boxLayer.getSource().getFeatureById("mapBox"+i);		// Point at box
			if (seg) 														// If valid
				seg.setStyle([styleOff]);									// Hide it		
			}
		for (i=0;i<group.length;++i) {										// For each mob
			m=this.FindMobByID(group[i]);									// Get index
			seg=this.boxLayer.getSource().getFeatureById("mapBox"+m);		// Point at box
			if (seg) 														// If valid
				seg.setStyle([styleOn]);									// Show it		
			}
		return;
		}			
	if (num < 0)															// If doing all
		start=0,end=this.mobs.length;										// Whole list
	this.ShowMapImages(num);												// Control images
	if (!mps.showBoxes || (mps.showBoxes == "off"))							// If not showing wireframes
		mode="off";															// Force mode off
	for (i=start;i<end;++i) {												// For each seg
		m=this.mobs[i];														// Point at mob
		if (m.type == "link")												// If a link
			this.ShowLink(i,mps.sh.mobVis[i] > 0);							// Show/hide iframe
		else if (m.type == "sound")											// If a sound
			mps.ShowSound(i,mps.sh.mobVis[i] > 0);							// Show/hide audio iframe
		else if (m.type == "text")											// If a text
			mps.ShowText(i,mps.sh.mobVis[i] > 0);							// Show/hide text iframe
		if (m.type != "map")												// If not a map
			continue;														// Continue
		if (this.mm == "ge") {												// If GE
			if (m.gid) {													// If loaded
				seg=ge.getElementById(m.gid);								// Get object
				if ((!$("#mobPos"+i).position()) || (mode == "off")) {		// If it's chapter is not open
					seg.setVisibility(false);								// Hide it
					continue;												// Next map
					}
				seg.setVisibility(!(mps.sh.mobVis[i] > 0));					// Show it 
				}
			}
		else if (this.mm == "ol") {											// If OL
			seg=this.boxLayer.getSource().getFeatureById("mapBox"+i);		// Point at box
			if (seg) {
				if ((!$("#mobPos"+i).position()) || (mode == "off")) {		// If it's chapter is not open
					seg.setStyle([styleOff]);								// Hide it
					continue;												// Next map
					}
				if (mps.sh.mobVis[i] > 0)									// ??
					seg.setStyle([styleOff]);								// Hide it
				else														// ??
					seg.setStyle([styleOn]);								// Show it		
				}
			}
		}
}

MapScholar.prototype.Goto=function(pos)									// SET EARTH VIEWPOINT
{
	var speed=1;															// Default speed
	if ((!pos) || (pos.length < 5))											// No where to go
		return;																// Quit
	var ge=shivaLib.map;													// Point to earth												
	pos=pos.replace(/"/g,"");												// Remove quotes
	var v=pos.split(",");													// Split up
	if (this.mm == "ol") {													// If OL
		var o=map.getView();												// Point at view
		var c=ol.proj.transform([v[1]-0,""+v[0].replace(/\*/,"")-0],'EPSG:4326',this.curProjection);	// Get center
		var fc=ValidCenter(o.getCenter());									// Get from center
		var fr=o.getRotation();												// Get from rotation		
		var fs=o.getResolution();											// Get from resolution
		var r=-v[4]*Math.PI/180;											// Get to rotation	
		v[2]=RangeToResolution(v[2],mapWid);								// Get to resolution
		if (v[4] != undefined)												// If defined
			o.setRotation(-v[4]*Math.PI/180);								// Set rotation
		if ((Math.abs(fc[0]-c[0]) < 2) && (Math.abs(fc[1]-c[1]) < 2)		// Center match
				&& (Math.abs(fs-v[2]) < 2) && (Math.abs(fs-v[2]) < 2)		// Resolution  match
				&& (Math.abs(fr-r) < 1) && (Math.abs(fr-r) < 1)				// Rotation  match
				)															// Already there
			return;															// Quit
		var b=4;															// Default bounce
		var bMin=2000;
		var duration=2000;													// Duration
		var start=+new Date();												// Start time
		if (v[5])	duration=v[5]*1000;										// If set, get duration
		if (v[6])	b=v[6]-0,bMin=10000000;									// If set, get bounce amount
		var pan=ol.animation.pan({											// Pan
		    duration: duration,												// Duration
		    source: fc,														// Start value
		    start: start													// Starting time
		  	});
		var rotate=ol.animation.rotate({									// Rotate
		    duration: duration,												// Duration
		    rotation: fr,													// Start value
		    start: start													// Starting time
		  	});
		var zoom=ol.animation.zoom({										// Zoom
		    duration: duration,												// Duration
		    resolution: fs,													// Start value
		    start: start													// Starting time
		  	});
		 var bounce=ol.animation.bounce({									// Fly bounce
		    duration: duration,												// Duration
		    resolution: Math.min(b*o.getResolution(),bMin),					// End value
		    start: start													// Starting time
		  });
		
		if (((""+v[0]).charAt(0) == "*") || (Math.abs(v[2]-o.getResolution()) < 1000)) // If animating point directly or at same height
	  		map.beforeRender(pan,rotate,zoom);								// Move to
	  	else																// Bouncing there
	  		map.beforeRender(pan,rotate,bounce);							// Pan, rotate and bounce
		 o.setResolution(v[2]);												// Set resolution								
		 o.setCenter(c);													// Set center
		return;
		}
	if (v[5] != undefined)													// If set
		speed=v[5]-0;														// Set speed value
	this.gotoLookAt=ge.getView().copyAsLookAt(ge.ALTITUDE_RELATIVE_TO_GROUND);	// LookAt object
	if ((""+v[0]).charAt(0) == "*") {										// If animating point directly
		v[0]=v[0].replace(/\*/,"");											// Remove *
		var sv=[];															// Holds start
		sv[0]=this.gotoLookAt.getLatitude();								// Start lat
		sv[1]=this.gotoLookAt.getLongitude();								// Start lon
		sv[2]=this.gotoLookAt.getRange();									// Start range
		sv[3]=this.gotoLookAt.getTilt();									// Start tilt
		sv[4]=this.gotoLookAt.getHeading();									// Start heading
		this.gotoStartPos=sv;												// Start
		this.gotoEndPos=v;													// End
		this.gotoStartTime=new Date().getTime();							// Start time
		this.gotoPosDur=speed;												// Duration
		window.clearInterval(mps.gotoPosTimer);								// Stop timer, if open
		this.gotoPosTimer=setInterval(function(){mps.GoToPos()},42);		// Set up timer to play ~24fps
		ge.getOptions().setFlyToSpeed(ge.SPEED_TELEPORT);					// Set speed to immediate
		return;																// Quit			
		}
	this.gotoLookAt.setLatitude(v[0]-0);									// Set lat
	this.gotoLookAt.setLongitude(v[1]-0);									// Set lon
	if (v[2] > 0)															// If set
		this.gotoLookAt.setRange(v[2]-0);									// Set range
	if (v[3] != undefined)													// If set
		this.gotoLookAt.setTilt(v[3]-0);									// Set tilt
	if (v[4] != undefined)													// If set
		this.gotoLookAt.setHeading(v[4]-0);									// Set heading
	if ((v[5] != undefined) && (mps.sh.curMob != -1) && (mps.mobs[mps.sh.curMob].seg))	// If set and valid
		mps.mobs[mps.sh.curMob].seg.setOpacity(v[5]/100);					// Set alpha

	ge.getOptions().setFlyToSpeed(speed-0);									// Set speed
	ge.getView().setAbstractView(this.gotoLookAt);							// Go there
}

MapScholar.prototype.GoToPos=function() 								// SET GE TO A POSITION OVER TIME
{
	var pct=(new Date().getTime()-mps.gotoStartTime)/(mps.gotoPosDur*1000);	// Get percentage
	if (pct >= 1) {															// If done
		window.clearInterval(mps.gotoPosTimer);								// Stop timer
		pct=1;																// Go to end
		}
	var start=mps.gotoStartPos;												// Point at start
	var end=mps.gotoEndPos;													// Point at end
	pct=1.0-((Math.cos(3.1414*pct)+1)/2.0);									// Full cosine curve
	if (start[0] != end[0])													// If different
		mps.gotoLookAt.setLatitude((start[0]+((end[0]-start[0])*pct))-0);	// Calc lat
	if (start[1] != end[1])													// If different
		mps.gotoLookAt.setLongitude((start[1]+((end[1]-start[1])*pct))-0);	// Calc lon
	if (start[2] != end[2])													// If different
		mps.gotoLookAt.setRange((start[2]+((end[2]-start[2])*pct))-0);		// Calc range
	if (start[3] != end[3])													// If different
		mps.gotoLookAt.setTilt((start[3]+((end[3]-start[3])*pct))-0);		// Calc tilt
	if (start[4] != end[4])													// If different
		mps.gotoLookAt.setHeading((start[4]+((end[4]-start[4])*pct))-0);	// Calc heading
	shivaLib.map.getView().setAbstractView(mps.gotoLookAt);					// Go there
}

MapScholar.prototype.ShowText=function(num, mode)						// HIDE/SHOW TEXT
{
trace(num,mode)
	var l,t,h,w,x=900;
	var cw=$("#containerDiv").width();
	if (mps.sh.presentMode == "Book")										// If book mode
		cw-=135;															// Account to extra
	var m=this.mobs[num];													// Point at mob
	var txt=m.desc;															// Use desc field
	var pos=m.north-0;														// get north
	if (m.type != "text") {													// If not a text mob
		txt=shivaLib.LinkToAnchor(m.text);									// Get text from text field
		pos=4;																// Assume top
//		if (s) {															// If found
//			pos=s[0].substring(4,s[0].length-1)-0;							// Get new pos
//			txt=txt.replace(s[0],"");										// Remove it
//			}
		mps.popupOpen=num;													// Set popup flag
		}
	if (m.prompt && m.prompt.match(/title/i)) 								// A title
		pos=0,m.east="";													// Whole screen
	if ((m.east) && (m.type == "text"))										// If spec'ing pos												
		l=m.north,t=m.south,w=m.east,h=m.west;								// Use it		
	else{ 
		if (mps.sh.presentMode == "Book")									// If book mode
			x=762;															// Smaller width
		var x2=x*.5,x4=x*.25,x8=x*.125;										// Fractional widths
		switch(pos) {														// Route on pos
			case 1:		l=x4;		t=150;	w=x2;		h=300;		break;	// Half centered
			case 2:		l=x*.375;	t=225;	w=x4;		h=150;		break;	// Quarter centered
			case 3:		l=x8;		t=75;	w=x*.75;	h=450;		break;	// Three-Quarter centered
			case 4:		l=20;		t=20;	w=x-46;		h=100;		break;	// Top
			case 5:		l=20;		t=475;	w=x-46;		h=100;		break;	// Bottom
			case 6:		l=20;		t=20;	w=x2-20;	h=300;		break;	// Half top-left
			case 7:		l=x2;		t=20;	w=x2-20;	h=300;		break;	// Half top-right
			case 8:		l=20;		t=280;	w=x2-20;	h=300;		break;	// Half bot left
			case 9:		l=x2;		t=280;	w=x2-20;	h=300;		break;	// Half bot right
			default:	l=0;		t=0;	w=x-6;		h=594;		break;	// Full
			}
		var rx=cw/x;														// X scaler
		var ry=$("#containerDiv").height()/600;								// Y scaler
		w*=rx;		h*=ry;		l*=rx;		t*=ry;							// Scale to fit size	
		}
	if ((mode) && (mps.sh.presentMode != "Slides")) {						// If showing in normal map mode
		str="<div style='font-family:sans-serif;font-size:small'>";			// Div
		if ((m.small) && (m.type != "map"))									// If an image spec'd
			str+="<br/><img style='border:1px solid #999' src='"+m.small+"' width='"+w/3+"'><br/>";		// Add it		
		str+="</p>"+txt+"<div>";											// Add desc
		if ((m.url) && (m.type != "map"))									// If a link
			str+="<br/>Click <a href='"+m.url+" ' target='_blank'>here</a> for more information";	// Add it		
		if (m.prompt && m.prompt.match(/title/i)) {							// A title
			str="<div style='font-family:sans-serif;font-size:18px;display:table;position:absolute;height:96%;width:96%;'>";
			str+="<div style='display: table-cell; vertical-align: middle;'>";
			str+="<div style='margin-left:auto;margin-right:auto;width:90%;height:360px;max-width:900px;'>";
			str+="<div style='float:left;width:50%;position:relative;'>";
			str+="<img alt='Atlas Cover' src='"+m.med+"' style='float:left; width: 100%; height: auto; margin-left: auto; margin-right: auto;'/></div>";
			str+="<div style='float: right; position: relative; height: 350px;  width: 45%;'>"
			str+="<div style='font-size:16px; margin-bottom: 40px'><strong>"+m.title+"</strong><br>";
			if (m.desc)
				str+="<span style='font-size:14px'>"+m.desc+"</span>";
			str+="</div><div style='font-size:14px'><p>A <a href='http://www.mapscholar.org' target='_blank'>MapScholar</a> Atlas";
			if (m.citation)
				str+=" by "+m.citation;
			str+="</p></div><img alt='Mapscholar Supporters' src='img/sponsors.png' style='margin-top:10px;margin-left:-10px;position: absolute; bottom: 0;' />";
			str+="</div></div></div></div>";
			}
		ShowIframe2((l+20-0),(t+20-0),w,h,"blank.htm","iframe-"+num,"white",str);	// Show iframe
		}
	else{																	// If hiding
		ShowIframe2(0,0,0,0,"","iframe-"+num);								// Hide iframe
		mps.popupOpen=-1;													// No popup open
		}
}

MapScholar.prototype.ShowLink=function(num, mode)						// HIDE/SHOW LINK
{
	var x=900,m=this.mobs[num];												// Point at mob
	var cw=$("#containerDiv").width();
	if (mps.sh.presentMode == "Book")										// If book mode
		cw-=135;															// Account to extra
	if (mode) {																// If showing			
		if (m.east) 														// If spec'ing pos												
			l=m.north,t=m.south,w=m.east,h=m.west;							// Use it		
		else{ 
			if (mps.sh.presentMode == "Book")								// If book mode
				x=810.5;													// Smaller width
			var x2=x*.5,x4=x*.25,x8=x*.125;									// Fractional widths
			switch(m.north) {												// Route on pos
				case 1:		l=x4;		t=150;	w=x2;		h=300;		break;	// Half centered
				case 2:		l=x*.375;	t=225;	w=x4;		h=150;		break;	// Quarter centered
				case 3:		l=x8;		t=75;	w=x*.75;	h=450;		break;	// Three-Quarter centered
				case 4:		l=20;		t=20;	w=x-46;		h=100;		break;	// Top
				case 5:		l=20;		t=475;	w=x-46;		h=100;		break;	// Bottom
				case 6:		l=20;		t=20;	w=x2-20;	h=300;		break;	// Half top-left
				case 7:		l=x2;		t=20;	w=x2-20;	h=300;		break;	// Half top-right
				case 8:		l=20;		t=280;	w=x2-20;	h=300;		break;	// Half bot left
				case 9:		l=x2;		t=280;	w=x2-20;	h=300;		break;	// Half bot right
				default:	l=0;		t=0;	w=x-16;		h=584;		break;	// Full
				}
			}
		var rx=cw/x;														// X scaler
		var ry=$("#containerDiv").height()/600;								// Y scaler
		w*=rx;		h*=ry;		l*=rx;		t*=ry;							// Scale to fit size	
		ShowIframe2((l+20-0),(t+20-0),(w+20)-0,(h+20-0),m.url,"iframe-"+num,"transparent");	// Show iframe
		}
	else
		ShowIframe2(0,0,0,0,"","iframe-"+num);								// Hide iframe
}

MapScholar.prototype.ShowSound=function(num, mode)						// HIDE/SHOW AUDIO
{
	var m=this.mobs[num];													// Point at mob
	var url="http://www.viseyes.org/shiva/go.htm?shivaGroup=Video&dataSourceUrl=";
	url+=m.url+"&volume=50";
	url+="&start="+(m.start?m.start:0)+"&end="+(m.end?m.end:"");			// Start, end
	url+="&autoplay="+(m.status == "play")+"&volume="+(m.rotation?m.rotation:50);		// Autoplay, volume
	if (navigator.userAgent.match(/firefox/i))								// If firefox
		url=url.replace(/\.mp3/g,".ogg");									// Needs ogg
	var n=m.north, w=m.west;												// Get pos
	if (mode) {																// If showing
		if (!w)																// If no position defined
			n=600,w=450;													// Set at bottom
		w*=mapWid/900;			n*=mapHgt/600;								// Scale to fit size	
		ShowIframe2(w-150,n-150,300,140,url,"iframe-"+num,"black");	// Show iframe
		if (mps.sh.inPlay)													// If playing until end
			mps.sh.soundPause=true;											// Pause changing until done
		shivaLib.msgAction=[{ id:"ShivaVideo=done", Do:function() { mps.sh.soundPause=false; }}];
		}
	else{																	// If hiding
		ShowIframe2(0,0,0,0,"","iframe-"+num);								// Hide iframe
		mps.sh.soundPause=false;											// Not in pause anymore
		}
}

MapScholar.prototype.ClickHandler=function(e)							// HANDLE CLICKS TO EARTH
{
	var i;
	var id=e.getTarget().getId();											// Find id
	if (id.indexOf("WIRE-") == 0) {											// If a wireframe
		for (i=0;i<mps.mobs.length;++i) 									// For each seg
			if (id == mps.mobs[i].gid) {									// A match
				Sound("click");												// Click
				mps.sh.HighlightMob(i,e.getShiftKey(),true);				// Highlight mob
				}
			}
}

MapScholar.prototype.SetPoster=function(num)							// SET IMAGE COORDS
{
	var m=this.mobs[num];													// Point at mob
	if ((!m.mid) || (m.type != "map"))										// If not a map
		return;																// Quit
	var ge=shivaLib.map;													// Point to earth												
	var seg=ge.getElementById(m.mid);										// Get object
	var	latLonBox=ge.getView().getViewportGlobeBounds();					// Get viewport	
	var n=latLonBox.getNorth();												// Get coord
	var s=latLonBox.getSouth();												// Get coord
	var e=latLonBox.getEast();												// Get coord
	var w=latLonBox.getWest();												// Get coord
	var wid=e-w;															// Get screen width																	
	var hgt=n-s;															// Height
	n=n-(hgt*m.north/100);													// Set north
	w=w+(wid*m.south/100);													// West
	s=n-(wid*m.east/100);													// South								
	e=w+(wid*m.east/100);													// East ------------- Replace wid with real hgt
	latLonBox.setBox(n-0,s-0,e-0,w,m.rotation-0);							// Set coords
	seg.setLatLonBox(latLonBox);											// Set geometry
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// SHELF 
/////////////////////////////////////////////////////////////////////////////////////////////////

function MapScholar_Shelf()												// CONSTRUCTOR
{
	this.curMob=-1;															// Default to first
    this.expandAll=true;													// Expand/collapse button status
    this.mobVis=new Array();                                                // Holds hide/show status
	this.playSpeed=50;														// Player speed 
	this.inPlay=null;														// Playing timer
	this.playTime=3000;														// Time for 1 mob
	this.playStart=0;														// Mob to start playing on
	this.playEnd=0;															// Mob to stop playing on
	this.soundPause=false;													// Pause while playing sound flag
	this.presentMode="Atlas";												// In regular mode
	this.showTimeline=true;													// Show timeline
	this.startBook=-1;														// Start of book pages
	this.endBook=-1;														// End of book pages
	this.firstPageMob=-1;													// 1st Mob on page
	
	$("body").keyup(function(e) {										// KEY DOWN HANDLER
		mps.controlKey=false;												// Control key off
		mps.shiftKey=false;													// Shift key off
		});

	$("body").keydown(function(e) {										// KEY DOWN HANDLER
		if ((e.keyCode == 40) ||(e.keyCode == 34)) {						// Down arrow, pg-dn
			mps.sh.HighlightMob("next",false,true);							// Next mob
			if (mps.sh.presentMode == "Book")								// If book mode
				mps.sh.HighlightMob(mps.sh.firstPageMob);					// Show 1st mob on page
			Sound("click");													// Click
			}
		else if ((e.keyCode == 38) || (e.keyCode == 33)){					// Up arrow, pg-up
			mps.sh.HighlightMob("last",false,true);							// Previous mob
			if (mps.sh.presentMode == "Book")								// If book mode
				mps.sh.HighlightMob(mps.sh.firstPageMob);					// Show 1st mob on page
			Sound("click");													// Click
			}
		else if (e.keyCode == 36) {											// Home
			mps.sh.HighlightMob(0,false,true);								// First mob
			if (mps.sh.presentMode == "Book")								// If book mode
				mps.sh.HighlightMob(mps.sh.firstPageMob);					// Show 1st mob on page
			Sound("click");													// Click
			}
		else if (e.keyCode == 35) {											// End
			mps.sh.HighlightMob(mps.mobs.length-1,false,true);				// Last mob
			if (mps.sh.presentMode == "Book")								// If book mode
				mps.sh.HighlightMob(mps.sh.firstPageMob);					// Show 1st mob on page
			Sound("click");													// Click
			}
		else if (e.keyCode == 16) {											// Shift key
			mps.shiftKey=true;												// Shift key on
			}
		else if (e.keyCode == 17) {											// Control key
			mps.controlKey=true;											// Control key on
			}
		});
}

MapScholar_Shelf.prototype.HighlightMob=function(which, multi, scroll)	// HIGHLIGHT MOB OBJECT
{
	var j,k,o,bases,defAlpha=100;
	var i=Math.max(this.curMob,0);											// Start point
	var n=mps.mobs.length-1;												// Last mob
	
	if ((this.inPlay) && (i >= this.playEnd)) {								// At end when playing
		this.Play();														// Turn off playing
		return;																// Quit
		}

	if (which == "next") {													// Going forward										
		if ((this.inPlay) && (this.soundPause)) 							// If pausing for sound to finish
			return;															// Don't change
		if (this.presentMode != "Book")	{									// If not a book
			while (mps.mobs[i].type == "page")	++i;						// If a page, skip over it
			i=Math.min(i+1,n);												// Cap at end
			}
		if (this.presentMode == "Book")										// If book view
			i=Math.min(i+1,this.endBook-1);									// Cap at book end
		else																// All other views
			while (((mps.mobs[i].type == "header") || (mps.mobs[i].type == "chapter")) && (i < n))  // Skip over nav mobs
			mps.Goto(mps.mobs[i++].goto);									// Set position
		this.curMob=i;														// Set curMob
		}
	else if (which == "last") {												// Going backward										
		if (this.presentMode != "Book")										// If not a book
			while (mps.mobs[i].type == "page")								// If a page
				--i;														// Skip over it		
		--i;																// Back up
		if (this.presentMode == "Book")										// If a book
			i=Math.max(i,this.startBook);									// Cap at book start 
		i=Math.max(i,0);													// Cap at end
		while (((mps.mobs[i].type == "header") || (mps.mobs[i].type == "chapter")) && (i > 0))  // Skip over nav mobs
			mps.Goto(mps.mobs[i--].goto);									// Set position
		this.curMob=i;														// Set curMob
		}
	else if ((""+which).match(/goto/)) {									// If a page goto
		i=which.substr(4)-0+this.startBook-1;								// Calc page
		if (this.presentMode == "Book")										// If a book
			i=Math.max(i,this.startBook);									// Cap at book start 
		i=Math.max(i,0);													// Cap at end
		i=Math.min(i,this.endBook-1);										// Cap at book end
		while (((mps.mobs[i].type == "header") || (mps.mobs[i].type == "chapter")) && (i > 0))  // Skip over nav mobs
			mps.Goto(mps.mobs[i--].goto);									// Set position
		this.curMob=i;														// Set curMob
		}
	else{																	// Absolute
		if (which < 0) {
			which=-which;
			o=mps.mobs[which];   											// Point at mob
			var cy=o.north-0+(o.south-o.north)/2;							// Lat				
			var cx=o.east-0+(o.west-o.east)/2;								// Lon
			var alt=0;														// Assume no change
			if (o.alt)														// If an altitude set
				alt=o.alt-0;												// Use it
			if (o.type == "map")											// If a map
				mps.Goto(cy+","+cx+","+alt+",0,0");							// Go to center of map
			this.mobVis[which]=0;											// Turn off (toggle)
			}
		i=Number(which);													// Get number
		}
	i=Math.min(Math.max(i,0),n);											// Set indexer and cap
	if (this.presentMode != "Book")											// If not a book
		this.curMob=i;														// Set curmob
	else																	// If a book
		this.curBookMob=i;													// Set curBookmob
	o=mps.mobs[i];   														// Point at mob

	if (o.settings) {														// If a settings field
		if (o.settings.match(/roads/)) {									// Roads tag
			mps.showRoads=(o.settings.match(/roads.*on/i)) ? true : false	// Set flag
			mps.ShowMapLayers(mps.showRoads);								// Show roads?
			}
		if (o.settings.match(/scale/)) {									// Scale tag
			mps.showScale=(o.settings.match(/scale.*on/i)) ? true : false	// Set flag
			mps.ShowMapScale(mps.showScale);								// Show scale?
			}
		if (o.settings.match(/boxes/)) {									// boxes tag
			mps.showBoxes=(o.settings.match(/boxes.*on/i)) ? "on" : "off"	// Set flag
			mps.ShowMapBoxes(-1,mps.showBoxes);								// Show boxes?
			}
		if (m=o.settings.match(/base.?(\S+)\s*/)) {							// Base tag
			mps.baseLayer=m[1];												// Set it
			mps.ShowMapLayers(mps.baseLayer);								// Show layer
			}
	}

	if (o.type == "startup") {												// A startup command
		return;																// Quit
		}
	else if (o.type == "boxes") {											// A boxes command
		if ((o.status == "on") || (o.status == "off")) {					// If set on or off
			mps.showBoxes=(o.status == "on");								// Set flag
			mps.ShowMapBoxes(-1,o.status);									// Set boxes
			}
		return;																// Quit
		}
	else if (o.type == "info") {											// An info command
		this.DrawInfoPanel("info");											// Draw info panel
		for (i=0;i<mps.mobs.length;++i)										// For each mob
		$("#iframe-"+i).remove();											// Delete any iframes														
		return;																// Quit
		}
	mps.Goto(o.goto);														// Position
	if ((!$("#mobPos"+i).position()) && (o.type != "chapter") && (o.type != "header")) {	// If not visible
		for (j=i;j>=0;--j) {												// Walk backwards													
			if (mps.mobs[j].status == "closed") {							// If a closed header/chapter
				mps.mobs[j].status="open";									// Open it
				this.FillShelf();											// Fill it
				break;
				}
			}
		}
	if ($("#mobPos"+i).position()) {										// If a pos element
		var y=$("#mobPos"+i).position().top+$("#contentShelf").scrollTop();	// Get pos
		if (scroll)															// If scrolling
			$("#contentShelf").scrollTop(y);								// Scroll
		}
	if (o.status == "open")			o.status="closed";						// If open, close
	else if (o.status == "closed")	o.status="open";						// If closed, open
	if (o.boxes) 															// If something in boxes field
		mps.showBoxes=(o.boxes.toLowerCase() == "on");						// Set box status
	if (!multi) {															// If not setting multiples
		for (j=0;j<n+1;++j)	{												// For each mob
//				mps.ShowMapBoxes(j,"on");									// Reset box
			if (j != this.curMob)											// If not this one
				this.mobVis[j]=0;											// Hide mob
			}
		}
	

	if (((o.type == "map") || (o.type == "layer")) && o.status)				// If an opacity set
		defAlpha=o.status													// Set opacity to status
	else																	// Not set
		defAlpha=100;														// Full value
	if (this.mobVis[i] < 50)												// If off
		this.mobVis[i]=defAlpha;											// Turn it on
	else																	// If on
		this.mobVis[i]=0;													// Turn it off
	if (o.base) {															// If base(s) defined
		this.mobVis[i]=defAlpha;											// Turn it on
		bases=(""+o.base).split(",");										// Get base array
		for (k=0;k<bases.length;++k)										// For each base
			bases[k]=mps.FindMobByID(bases[k]);								// Get index from id
		for (j=0;j<n+1;++j)	{												// For each mob
			for (k=0;k<bases.length;++k)									// For each base
				if (bases[k] == j) {										// If a base defined													
					if (mps.mobs[j].status)									// If alpha set
						this.mobVis[j]=mps.mobs[j].status;					// Show base mob using alpha
					else													// No alpha set
						this.mobVis[j]=100;									// Fully on
					}
			}
		}
	this.FillShelf();														// Redraw shelf
	mps.ShowMapBoxes(-1,"on");												// Show visible boxes
	this.ShowPrompt(o.prompt,2000);											// Show timed prompt
	if (o.settings && o.settings.match(/slide/i)) {							// If forcing a slide display
		var oldMode=this.presentMode;										// Save current mode
		this.presentMode="Slides";											// Forcing slides
		}
	if (this.presentMode == "Slides")										// If in present mode
		this.DrawInfoPanel("show");											// Show it
	if (o.settings && o.settings.match(/slide/i)) 							// If forcing a slide display
		this.presentMode=oldMode;											// Restor old one

	if (o.settings && o.settings.match(/box=/i)) {							// Show box tag
		v=o.settings.split(",");											// Spit out box ids
		if (v[0]) {															// If at least one
			v[0]=(""+v[0]).replace(/box=/i,"");								// Remove header	
			mps.ShowMapBoxes(0,0,v);										// Show boxes
			}
		}
}

MapScholar_Shelf.prototype.Draw=function()								  // DRAW SHELF
{
	var i;
	var str="<p>";	
	var sw=0;
	if (this.presentMode == "Book") 
		sw=138;
	this.curBookMob=0;
	str+="&nbsp;&nbsp;<img src='img/annotate.gif' style='vertical-align:bottom' title='Annotate' onclick='mps.dr.DrawControlBar(true)'>";		
	str+="<label>&nbsp; Find: </label ><input id='mpsFind' style='font-size:x-small;width:80px' type='text'/>";
	str+="<div id='timeline' style='position:absolute;left:152px;width:"+(mapWid-154-sw)+"px;top:5px;height:26px'></div></p>";
	str+="<div id='promptBar' style='position:absolute;left:152px;width:"+(mapWid-154)+"px;top:4px;height:29px;background:#eee;overflow:hidden'></div>";
	if (this.presentMode != "Book") {
		str+="<div class='unselectable' style='position:absolute;left:"+(mapWid+87)+"px;top:24px;font-size:8px;width:80px;color:#999'>Play speed</div>";
		str+="<div class='unselectable' id='playSpeed' style='position:absolute;left:"+(mapWid+74)+"px;top:11px;width:70px'></div>";
		}
	else{
		str+="<div id='bookPageNum' style='position:absolute;left:"+(mapWid-60)+"px;top:12px;font-size:11px;width:80px;text-align:center;color:#999;width:200px'> </div>";
		}
	str+="<div id='loadProgress' style='position:absolute;left:"+(mapWid-65-sw)+"px;top:11px;font-size:10px;width:120px;font-weight:bold;color:#009900;background:#eee;padding:left:8px;text-align:center'></div>";

	str+="<img id='playbut' style='position:absolute;top:8px;"; 
	if (this.presentMode == "Book") 
		str+="cursor:pointer;left:"+(mapWid+150)+"px' src='img/playbut.gif' width='22' title='Next page'>";
	else if (this.inPlay)
		str+="cursor:pointer;left:"+(mapWid+154)+"px' src='img/stopbut.gif' title='Stop' onclick='mps.sh.Play()'>";
	else
	 	str+="cursor:pointer;left:"+(mapWid+154)+"px' src='img/playbut.gif' title='Play' onclick='mps.sh.Play()'>";
	if (this.presentMode != "Book") 
		str+="<img src='img/againbut.gif' style='position:absolute;cursor:pointer;left:"+(mapWid+48)+"px;top:9px' title='Start over' onclick='mps.sh.Play(\"1\")'>";		
  	else
		str+="<img src='img/revbut.gif' width='22' style='position:absolute;cursor:pointer;left:"+(mapWid-80)+"px;top:8px' title='Last page' id='lastPageBut'>";		
	$("#controlBarDiv").html(str+"");                                    // Add to DOM
	str="<div id='contentShelf' style='position:absolute;top:27px;height:"+(mapHgt-41)+"px;background-color:#fafafa;margin:0px;padding:6px;overflow-x:hidden;overflow-y:scroll;border:1px solid #ccc;'/></div>";
	if (this.presentMode != "Book") {
		str+="<p class='unselectable'>&nbsp;&nbsp;&nbsp;<img id='expandAll' src='img/";			// Image base
		if (this.expandAll)													// If expand
			str+="expand2.gif'> Expand all";								// Expand all button
		else																// Collaspe
			str+="collapse2.gif'> Collapse all";							// Collapse all button
		}
	str+="<img src='img/settingsbut.gif' style='position:absolute;left:"+(214-0+sw)+"px;top:8px' onclick='mps.sh.Settings()' title='Settings'>";		
	var v=["Atlas","Slides"];												// Assume no book mode											
	for (i=0;i<mps.mobs.length;++i) {										// For each mob
		if (mps.mobs[i].type == "page") {									// If a page mob
			v.push("Book");													// Add book to list
			break;															// Quit looking
			}
		}
	str+=shivaLib.MakeSelect("setViewMode",false,v,mps.sh.presentMode," onchange='mps.sh.PresentView(this)' style='position:absolute;left:"+(156-0+sw)+"px;top:6px;font-size:xx-small'");
	
	$("#shelfDiv").html(str);												// Add div
	$("#shelfDiv").width(230-0+sw);											// Reset width
	$("#shelfDiv").css("left",(mapWid-sw+20)+"px");							// Reset left
	$("#promptBar").hide(0);												// Hide prompt bar

	var n=mps.mobs.length;													// Number of mobs to add
	this.mobVis=[];															// Remove old array
	for (i=0;i<n;++i)														// For each mob
		this.mobVis.push(0);												// Make it hidden                                       
	this.FillShelf();														// Draw shelf

	
	var ops={ min:0, max:100, value:mps.sh.playSpeed,						// Slider options
		slide:function(event,ui) {											// Slide cb
			mps.sh.playSpeed=ui.value;										// Set speed
		}};    
	$("#playSpeed" ).slider(ops);											// Init slider

	if (this.presentMode == "Book") {										// If book view
	
		mps.sh.HighlightMob(this.firstPageMob);								// Show 1st mob on page
		
		$("#lastPageBut").click(function() {							// GO TO LAST PAGE
			$("#contentShelf").scrollTop(0);								// Scroll to top
			mps.sh.HighlightMob("last");									// Set page
			Sound("click");													// Click
			mps.sh.HighlightMob(mps.sh.firstPageMob);						// Show 1st mob on page
			});
		
		$("#playbut").click(function() {								// GO TO NEXT PAGE
			$("#contentShelf").scrollTop(0);								// Scroll to top
			mps.sh.HighlightMob("next");									// Set page
			Sound("click");													// Click
			mps.sh.HighlightMob(mps.sh.firstPageMob);						// Show 1st mob on page
			});
	}	
	
	$("#expandAll").click(function(e) {									// EXPAND/COLLAPSE ALL
		Sound("click");													// Click
		mps.sh.ToggleExpandCollapse();										// Expand or collapse
		});

	var input=document.getElementById("mpsFind");							// GEOLOCATE - point at input box
	var autocomplete=new google.maps.places.Autocomplete(input);			// Init autocomplete

	autocomplete.addListener('place_changed', function(e) {					// On complete
		var val=$("#mpsFind").val();										// Get val
		if ((val.length > 1) && (val.match(/=/))) {							// If looking for a kml feature
			var id=val.substr(1);											// Get id
			if ((mps.sh.curMob == -1) || (mps.mobs[mps.sh.curMob].type != "layer"))	// If not a layer
				return;														// Quit
			var str="";
			seg=mps.mobs[mps.sh.curMob].mid.substr(6);						// Get id
			seg=mps.kmlLayers[seg];											// Get seg
			f=seg.getSource().getFeatures().length;							// Get number of features
			for (var i=0;i<f;++i)											// For each feature
				str+=i+",50,cccccc,000000,1;";								// Make it bland
			mps.SetChoroplethFeatures(seg,str,null,false);					// Set feature
			str=val.substr(1)+",50,ff0000,00ff00,3;";						// Make it stand out
			mps.SetChoroplethFeatures(seg,str,null,false);					// Set feature
			return;															// Quit
			}
 		if ((val.length > 1) && (val.match(/\?/))) {						// If querying a choro
 			mps.ChoroQuery(val.substr(1),"ff0000");							// Do it
			return;														// Quit
			}
 		var place=autocomplete.getPlace();									// Get place
		var lat=place.geometry.location.lat();								// Get lat
		var lon=place.geometry.location.lng();								// Get lon
		mps.Goto(mps.Goto(lat+","+lon+",100000,0,0"));						// Move map
		});
}

MapScholar_Shelf.prototype.FillShelf=function()							// FILL SHELF
{
	var tim="<div style='position:absolute;width:"+$("#timeline").width()+"px;height:1px;top:10px;' class='timelinebar'/>";
	var i,j,o,x,y,pic;
	var min=3000,max=0;
	var dates=new Array();
 	var n=mps.mobs.length;                            						// Number of mobs
	if (mps.popupOpen != -1)												// If popup is open
		mps.ShowText(mps.popupOpen,false);									// Close it
	this.DrawInfoPanel("close");											// Close infopanel, if open
	var str="<table class='unselectable' width='100%' cellspacing='0' style='cursor:pointer'>";  // Table start and style
	var thisMob=-1;															// Holds currently active mob
	for (i=0;i<n;++i) {                                                     // For each mob
		o=mps.mobs[i];     													// Point at mob
 		if (o.start && !isNaN(o.start) && ((o.type == "map")|| (o.type == "choro") || (o.type == "layer")))	{		// A valid year
			min=Math.min(o.start,min);										// Find min
			max=Math.max(o.start,max);										// Find max
			}
		}
	var pixPerYear=($("#timeline").width()-24)/(max-min);					// Pixels per year
	i=min;																	// Start at  min
	while (i < max-10) {													// While not max
 		i=(i-i%10)-0+10;													// Next decade
		x=Math.round((i-min)*pixPerYear)+8;									// X pos
   		tim+="<div style='position:absolute;text-align:center;color:#aaa;left:"+(x-17)+"px;width:30px;top:18px' class='unselectable'><i>"+i+"</i></div>";
   		tim+="<div style='position:absolute;left:"+x+"px;height:16px;width:1px;top:2px;background-color:#999'/>";
		}
	if (this.presentMode == "Book") {										// If book mode										
		$("#bookPageNum").text("Page "+(this.curMob-this.startBook+1)+" of "+(this.endBook-this.startBook));	// Page num
		if (mps.mobs[this.curMob].type == "page")							// If a page
			str+=AddPageToShelf(this.curMob);								// Add it
		}
	else{
		for (i=0;i<n;++i)                                                   // For each mob
			str+=AddMobToShelf(i);											// Add it
		}
   	str+="<tr><td colspan='2' align='center'><img width='160' height='174' src='img/MapScholarLogo.png'/></td></tr>";
 
 	gotoBook=function(val) {											// GOTO PAGE HANDLER
 		if (val.match(/@/))	{												// If an indirect page
 			val=val.replace(/@/g,"");										// Remove it
 			val=mps.FindMobByID(val);										// Get mob from id
			if (val == -1)													// No valid mob
				return;														// Quit
			val-=mps.sh.startBook-1;										// Convert to page num (1-n)
			}
		$("#contentShelf").scrollTop(0);									// Scroll to top
 		mps.sh.HighlightMob("goto"+val);									// Show page
 		Sound("click");														// Click
 		mps.sh.HighlightMob(mps.sh.firstPageMob);							// Show first mob		
 		}
 		
 	if (this.presentMode == "Book") {										// If book mode		
   		str+="<tr><td colspan='2' align='center'><br>Go to page: <input size='3' style='font-size:xx-small;text-align:center' type='text' onchange='gotoBook(this.value)'> &nbsp;</td></tr>";
    	str+="<tr><td colspan='2' align='center'><br> <a href='javascript:gotoBook(\"0\")'>Table Of Contents</a></td></tr><br><br>";
 		}
 	if (this.showTimeline)													// If showing timeline
 		$("#timeline").html(tim);											// Add timeline data
	$("#contentShelf").html("</table>"+str);								// Add mobs
	if (this.curMob != -1) {												// If a current
		$("#visControl").show();											// Show it
		$("#mobVis").val(this.mobVis[this.curMob]);							// Set value
		}
  
  	for (i=0;i<dates.length;++i){											// For each map
		if (dates[i].part > 1) {											// If multi
	  		a=0;
	  		for (j=i;j<dates.length;++j) {									// For each map
				if (dates[i].date == dates[j].date) {						// One of the set
					$("#timedot"+dates[j].index).css("top",a++*7+"px");		// Position it
					dates[j].part=1;										// Skip it
					}
				if (a >= 4)													// If past max
					break;													// Quit
				}
			}
		}

	for (i=0;i<n;++i) {														// For each mob
		$("#timedot"+i).click( function(e) {								// Add click handler
			var id=this.id.substr(7);										// Get id
			Sound("click");													// Click
			mps.sh.HighlightMob(id,e.shiftKey,false);						// Highlight mob
			});
		$("#mob"+i).click( function(e) {									// Add click handler
			var id=this.id.substr(3);										// Get id
			Sound("click");													// Click 
			mps.sh.HighlightMob(id,e.shiftKey,false);						// Highlight mob
			SendShivaMessage("MapScholar=mob",mps.mobs[id].id);				// Send that mob has been clicked
			});
		$("#heading"+i).click( function(e) {								// Add click handler
			var id=this.id.substr(7);										// Get id
			mps.Goto(mps.mobs[id].goto);									// Set pos
			});
		}
		
 // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////
 
	function AddPageToShelf(num) {	
		var title;
		var v,i,adds=[];
		var str="<tr><td colspan='2' style='font-size:x-small;padding:8px'>";
		var o=mps.mobs[num];      											// Point at mob
		var desc=o.desc;													// Get desc
		if (o.title) 														// If it has a title
			str+="<p><b>"+o.title+"</b></p>";								// Add it
		if (desc && desc.match(/mob\(/)) {									// If an embedded mob
			var vv,url,num;
			v=(desc+" ").match(/mob\((.*?)\)/ig);							// Extract url(s)
			for (i=0;i<v.length;++i) {										// For each url
				v[i]=$.trim(v[i])											// Trim it
				vv=v[i].substring(4,v[i].length-1).split(",");				// Split by comma
				num=mps.FindMobByID(vv[0]);									// Get mob from id
				url="mps.sh.HighlightMob("+num+"); return false;";			// Link to highlight
				title="";													// Assume no title
				if (vv.length > 1) 											// If a title spec'd
					title=vv[1];											// Use it
				desc=desc.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))," <a href='#' onclick='"+url+"' target='_blank'>"+title+"</a> ");	// Replace with anchor tag
				if (i == 0) 												// If 1st mob
					mps.sh.firstPageMob=num;								// Set flag
				if (num != -1)												// If valid
					adds.push(num);											// Add shelf array
				}
			}
		if (desc && desc.match(/goto\(/)) {									// If an embedded goto
			var j,k,vv,url;
			v=(desc+" ").match(/goto\((.*?)\)/ig);							// Extract url(s)
			for (i=0;i<v.length;++i) {										// For each url
				k=0;														// Reset
				v[i]=$.trim(v[i])											// Trim it
				vv=v[i].substring(5,v[i].length-1).split(",");				// Split by comma
				title="";													// Assume no title
				if (isNaN(vv[0])) 											// If a title spec'd
					title=vv[0],++k;										// Use it
				url="";														// Clear
				for (j=k;j<vv.length-1;++j)									// For all pos's
					url+=vv[j]+",";											// Re-sum them up
				url+=vv[j];													// Add last one
				desc=desc.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))," <a href='javascript:mps.Goto(\""+url.replace(/<.*?>/g,"")+"\")'>"+title+"</a> ");	// Replace with anchor tag
				}
			}
		if (desc && desc.match(/toc\(/)) {									// If an embedded toc
			var t,vv;
			v=(desc+" ").match(/toc\((.*?)\)/ig);							// Extract url(s)

		 	gotopage=function(val) {										// HIGHLIGHT MOB
				$("#contentShelf").scrollTop(0);							// Scroll to top
		 		mps.sh.HighlightMob("goto"+(val-mps.sh.startBook+1));		// Show page
		 		mps.sh.HighlightMob(mps.sh.firstPageMob);					// Show first mob		
				}

			for (i=0;i<v.length;++i) {										// For each url
				vv=v[i].substring(4,v[i].length-1).split(",");				// Split by comma
				vv[0]=mps.FindMobByID(vv[0]);								// Get mob from id
				if (vv[0] != -1) {											// If found
					t="<a href='javascript:gotopage(\""+vv[0]+"\")'>";		// Goto function
					t+=mps.mobs[vv[0]].title+"</a><br>";					// Set title
					desc=desc.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")),t);	// Replace with anchor tag
					}
				}
			}
		if (desc && desc.match(/foot\(/)) {									// If embedded footnotes
			v=(desc+" ").match(/foot\(.*?\)/ig);							// Extract footnotes(s)
			for (i=0;i<v.length;++i) {										// For each url
				title=v[i].substr(5,v[i].length-6);							// Extract actual note
				desc=desc.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))," <a href='#' title='"+title+"'><b><sup>["+(i+1)+"]</b></sup></a> ");	// Replace with anchor tag
				}	
			}
		if (desc && desc.match(/more\(\)/)) {								// If more tag
			v=desc.split("more()");											// Split
			desc=v[0]+"<span id='moreHead' style='color:#009900;text-align:center' onclick='toggleMore()'";
			desc+="> More...</span><span id='moreText' style='display:none'>"+v[1]+"</span>"; 											
			}
		if (desc) 															// If it has a desc
			str+=desc+"<br>";												// Add it
		str+="<br><hr width='319'></td></tr>";								// End
		for (i=0;i<adds.length;++i)											// For each mob mentioned
			str+=AddMobToShelf(adds[i]);									// Add it
		return(str);														// Return html
	}
 
 	function AddMobToShelf(num) {	
		var str=""
		var pic="";															// Assume no pic
		var o=mps.mobs[num];      											// Point at mob
		if ((o.type == "boxes") || (o.type == "timeline")|| (o.type == "page") || (o.type == "startup"))	// If not displayable
			return str;														// Don't show it
		if ((o.type == "chapter") || (o.type == "header")) {				// A header													
			str+="<tr id='heading"+i+"' valign='top' height='30'><td colspan='2'><div class='"+o.type+"bar'>"; // Start
			str+="<img id='mob"+i+"' src='img/";							// Img base
			if (o.status == "closed")										// If open
				str+="expand";												// Expand
			else															// If closed
				str+="collapse";											// Collapse
			if (o.type == "header")											// If a header
				str+="2";													// Use dark icons
			str+=".gif'><b>"+o.title+"</div>";								// Title
			if (o.type == "chapter")
				str+="<img src='img/cplaybut.gif' style='position:relative;left:182px;top:-16px' title='Play chapter' onclick='mps.sh.Play(\"0\",\""+i+"\")'>";		
			str+="</td><tr>";												// End 
			if ((o.desc)&& (o.status != "closed"))							// If a description
				str+="<tr><td colspan='2'><i>"+o.desc+"</i><br/><br/></td></tr>";	// Add it
			if (o.status == "closed")	{									// If closed
				var type=o.type;											// Search type
				for (j=i+1;j<n;++j) {										// For each mob
					o=mps.mobs[j];   										// Point at mob
					if (o.type == type)										// If a match
						break;												// Quit
					if ((type == "header") && (o.type == "chapter"))		// Quit on chapter if a header
						break;												// Quit
					}
				i=j-1;														// Set next index
				}
			return str;														// No need to do more
			}
		if (o.type == "map") { 												// A map													
			if (o.small)                                                    // If a small defined															
				pic=o.small;												// Use it
			else if (o.med)													// Else if a med defined															
				pic=o.med;													// Use it
			else if (o.url)													// Else if a large defined															
				pic=o.url;													// Use it
			tim+=AddMapToTimeline(o,i);										// Add map to timeline
			}
		else if (o.type == "layer") {										// A layer													
			if (o.small)													// If a thumb defined                                                           
				pic=o.small;												// Use it
			else															// Use icon
				pic="img/layericon.png";									// Set
			tim+=AddMapToTimeline(o,i);										// Add map to timeline
			}
		else if (o.type == "choro") {										// A layer													
			if (o.small)													// If a thumb defined                                                           
				pic=o.small;												// Use it
			else															// Use icon
				pic="img/choroicon.png";									// Set
			tim+=AddMapToTimeline(o,i);										// Add map to timeline
			}
		else if (o.type == "goto")											// A goto													
			pic="img/gotoicon.png";											// Use icon
		else if (o.type == "link")											// A shiva element													
			pic="img/linkicon.png";											// Use icon
		else if (o.type == "sound")											// A sound													
			pic="img/audioicon.png";										// Use icon
		else if (o.type == "text")											// A text													
			pic="img/texticon.png";											// Use icon
		else if (o.type == "info")											// An info													
			pic="img/texticon.png";											// Use icon
		str+="<tr id='mob"+num+"'";											// Row start
		if (mps.sh.mobVis[num] > 0) 										// If visible
			str+="' style='background-color:#d0e1ec'";						// Color background
		if ((o.type == "map") || (o.small)) {								// If a map pic defined
			str+="><td valign='top' width='70'>";							// Double column
			if (pic)														// If a pic
				str+="<img style='border: 1px solid #999' width='64' src='"+pic+"'>"; // Add it
			str+="&nbsp;&nbsp;</td>";											// End col
			str+="<td valign='top'><span id='mobPos"+ num+"'><b>"+o.title+"</b><br/></span>";	// Add title
			if (o.start)													// If a date
				str+="<span style='color:#770000'><b>"+Math.floor(o.start)+"</b></span> ";	// Add date
			}
		else{																// Other mob
			str+="><td colspan='2' valign='top'>";							// Single column
			str+="<img src='"+pic+"'>"; 									// Add it
			str+="&nbsp;&nbsp;<span id='mobPos"+ i+"'><b>"+o.title+"</b><br/></span>";	// Add title
			}
		if ((o.desc) && ((o.type == "map") || (o.type == "chapter") || (o.type == "header") || (o.small))) { // If desc spec'd
			if ((o.text)&& (mps.sh.mobVis[i] > 0))							// If text defined and visible
				str+="&nbsp;&nbsp;<img id='showpopup' title='Show popup info' src='img/popupbutton.gif'/>";
			str+="<br/>";													// Add desc
			}
		if ((o.desc) && ((o.type == "goto")&& (mps.sh.curMob == i) && (mps.sh.mobVis[num] > 0)))  // If desc on an open goto
			str+=o.desc+"<br/>";						// Add desc
		str+="<br/></td></tr>";												// Close entry
		if (((mps.sh.curMob == num) || (mps.sh.presentMode == "Book")) && (mps.sh.mobVis[num] > 0) && ((o.type == "map") || (o.type == "layer")|| (o.type == "choro"))){	// If selected and visible
			thisMob=num;													// Set current mob
			str+="<tr style='background-color:#d0e1ec'><td valign='top' style='color:#009900;padding-left:8px'><b>Visibility";
			if (o.type == "choro")		str+="</br></br>Query"; 
			str+="</b></td><td>";
			str+="<div id='mobVis' style='width:60%;display:inline-block'></div>";		// Add div for vis
			str+="&nbsp;&nbsp;&nbsp;&nbsp;<img id='mobInfo' title='See citation' src='img/infobutton.gif'/>";
			if ((o.url) && (o.type == "map"))
				str+="&nbsp;&nbsp;<img id='hiresmap' title='See hi-res map' src='img/viewdot.gif'/>";
			if (o.type == "choro") {
				var j;
				str+="</br></br><input type='text' id='chorQuery'style='width:80%;font-size:x-small;height:12px' onchange='mps.ChoroQuery(this.value,\"ff0000\")'>";
				var ss=o.desc;												// Copy desc
				var v=null;
				if (ss)														// If a description
					v=ss.match(/bull.?\(.+?\)/gi);							// Get bullets
				if (v) {													// If bullets
					for (j=0;j<v.length;++j) 								// For each one
						v[j]="<br><font color='"+v[j].match(/bull\((.+)\)/i)[1]+"'>&block;&block;&block; </font>";	// Make Color tag
					for (j=0;j<v.length;++j) 								// For each one
						ss=ss.replace(/bull.?\(.+?\)/i,v[j]);				// Replace bullets
					}
				if (ss)														// If a description
					str+="<p>"+ss+"</p>";									// Add to display
				}
			str+="<br/></td></tr>";											// End row
			}
		return str;
	}
 
   	function AddMapToTimeline(o,i) {									// ADD MAP TO TIMELINE
  		var j,p=1,a=1;
  		var x=Math.round((o.start-min)*pixPerYear)+8;						// X pos
   		var str="<div id='timedot"+i+"' class='timelinedot' style='position:absolute;left:"+x+"px;top:"+6+"px;";
   		if (mps.sh.mobVis[i] > 0)											// If selected
  			str+='background-color:#000099';								// Make it blue
   		str+=" ' title='";													// Start tooltip
   		var v=(""+o.start).split(".");										// Get parts
 		if (v.length == 1)													// Yr
   			str+=v[0];														// Add it
   		else if (v.length == 2)												// Yr/mo
   			str+=v[1]+"/"+v[0];												// Add it
   		str+="'></div>";													// Finish tooltip
	  	for (j=0;j<dates.length;++j)										// For each map
			if (dates[j].date == o.start) ++p;								// If it matches this date, inc
	 	dates.push({date: o.start, part: p, index:i});						// Save the date
	  	for (j=0;j<dates.length;++j)										// For each map
			if (dates[j].date == o.start) dates[j].part=p;					// If it matches this date, set part
    	return str;															// Return div
 		}	
   
	$("#mobInfo").click( function(e) {										// CLICK ON INFO BUTTON
		Sound("click");														// Click
		mps.sh.DrawInfoPanel("cite");										// Show citation
		});

	$("#hiresmap").click( function(e) {										// CLICK ON HIRES MAP
		Sound("click");														// Click
		mps.SetHiResMapImage(thisMob);										// Set hi-res map
		mps.sh.ShowPrompt("<span style='color:#990000;font-size:12px'>High-resolution map is loading</span>| &nbsp;<i>Please wait...</i>",4000);				// Show timed prompt
		});

	$("#showpopup").click( function(e) {									// CLICK ON POPUP
		e.stopPropagation();												// Don't redraw
		Sound("click");														// Click
		mps.ShowText(mps.sh.curMob,true);									// Show it
		});

	if ((thisMob != -1) && (this.mobVis[thisMob] > 0)) {					// If selected and visible
		var val=this.mobVis[thisMob];										// Get def
		var ops={ min:0, max:100, value:val,								// Slider options
			slide:function(event,ui) {										// Slide cb
				mps.sh.mobVis[thisMob]=ui.value;							// Set vis factor
				mps.ShowMapImages(thisMob);									// Set alpha
				}
			}    
		$("#mobVis" ).slider(ops);											// Init slider
		}
}

MapScholar_Shelf.prototype.PresentView=function(select)					// PRESENTATION MODE
{
	if (this.presentMode == "Book")											// If coming from book
		this.curMob=0;														// Start from scratch
	this.presentMode=select.value;											// Set flag
	this.SetBookStartEnd();													// Set book start/end
	if (select.blur)														// If not an explict call
		select.blur();														// Remove focus
	this.Draw();															// Redraw shelf
	if (select.value == "Slides")											// In slide mode	
		this.DrawInfoPanel("show");											// Show it
	else																	// Other node
		this.DrawInfoPanel("close");										// Close panel
}	

MapScholar_Shelf.prototype.SetBookStartEnd=function()					// SET BOOK START/END
{
	if (this.presentMode == "Book")	{										// If a book		
		var n=mps.mobs.length;                            					// Number of mobs
		for (var i=0;i<n;++i) {                                             // For each mob
			if (mps.mobs[i].type == "page")	{								// Found 1st page
				this.startBook=this.curMob=i;								// Point at page
				mps.Goto(mps.mobs[this.curMob].goto);						// Go to goto
				break;														// Quit looking
				}
			}	
		this.endBook=n;														// End of book
		for (var i=this.startBook-0+1;i<n;++i) {                            // For each mob
			if (mps.mobs[i].type != "page")	{								// Found last page
				this.endBook=i;												// Point at page
				break;														// Quit looking
				}
			}
		}
}

MapScholar_Shelf.prototype.ShowPrompt=function(msg, time)				// SHOW PROMPT
{
	if (!msg)																// If no prompt
		return;																// Quit
	var v=msg.split("|");													// Split into parts
	var str="<p><b>"+v[0]+" </b>";											// Title
	if (v[1])																// If a subtitle
		str+=v[1];															// Add it
	$("#promptBar").html(str+"</p>");										// Show message
	if ((this.inPlay) || (!time))											// If playing, or simply showing a prompt
		$("#promptBar").fadeIn(200);										// Show it
	else																	// If clicking
		$("#promptBar").fadeIn(200).delay(time).fadeOut(200);				// Flash it up
}
	
MapScholar_Shelf.prototype.Settings=function()							// SETTINGS
{
	var pos;
	if (mps.mm == "ol") {													// If OL
		var o=map.getView();												// Point at view
		var c=ol.proj.transform(ValidCenter(o.getCenter()),mps.curProjection,'EPSG:4326');		// Get center
		pos=Math.floor(c[1]*10000)/10000+","+Math.floor(c[0]*10000)/10000+","+ResolutionToRange(o.getResolution(),mapWid);	
		pos+=",0,"+Math.floor((o.getRotation()*180/Math.PI)*1000)/1000;		// Rotation
		} 													
	else if (mps.mm == "ge") {												// If GE
		var la=shivaLib.map.getView().copyAsLookAt(shivaLib.map.ALTITUDE_RELATIVE_TO_GROUND);
		pos=Math.floor(la.getLatitude()*10000)/10000+","+Math.floor(la.getLongitude()*10000)/10000+",";
		pos+=Math.floor(la.getRange())+","+Math.floor(la.getTilt()*100)/100+","+Math.floor(la.getHeading()*100)/100;
		}
	var str="<br/><table id='ez-maintbl' cellspacing=0 cellpadding=0 style='font-size:small'>";
	if (mps.showBoxes)														// If set
		str+=" checked='checked'"											// Check it			
	if (mps.mm == "ol") {													// If OL
		str+="<tr><td>Base Layer </td><td>";								// Base layer
		str+=shivaLib.MakeSelect("setbaselayer",false,["Satellite","Terrain","Earth","Watercolor","B&W","Roadmap"],mps.baseLayer);
		str+="</td></tr>";													// End
		}
	else{																	// GE
		str+="<tr><td>Show Roads? </td><td><input type='checkbox'";			// Roads
		if (mps.showRoads)													// If set
			str+=" checked='checked'"										// Check it			
		str+=" style='vertical-align:middle' id='roads'></td></tr>";		// End box
		}
	str+="<tr><td>Show map boxes? </td><td><input type='checkbox'";			// Boxes
	str+=" style='vertical-align:middle' id='wireframes'></td></tr>";		// End box
	str+="<tr><td>Show Map Scale? </td><td><input type='checkbox'";			// Scale
	if (mps.showScale)														// If set
		str+=" checked='checked'"											// Check it			
	str+=" style='vertical-align:middle' id='scale'></td></tr>";			// End box
	str+="<tr><td>Current position:</td><td><input type='text' style='width:130px' value='"+pos+"'/></td></tr>";	// Current pos
	str+="</table><div align='right' style='font-size:x-small'><br/>";		// End table			
	str+=" <button id='OKBut'>OK</button>";									// OK
	if (mps.mm == "ge") 													// If GE
		$("#containerDiv").height($("#containerDiv").height()/100);			// Shrink it
	shivaLib.ShowLightBox(-400,20,"MapScholar settings",str)				// Create light box
	$("#OKBut").button().click(function() { $("#shivaLightBoxDiv").remove(); if (mps.mm == "ge") $("#containerDiv").height($("#containerDiv").height()*100); });  // OK

	$("#wireframes").click(function(e) {								// SHOW BOXES?
		Sound("click");														// Click
		mps.showBoxes=e.target.checked;										// Set var
		if (e.target.checked)												// If checked
			mps.ShowMapBoxes(-1,"on");										// Show them
		else																// If unchecked
			mps.ShowMapBoxes(-1,"off");										// Hide
		});
	$("#roads").click(function(e) {										// SHOW ROADS?
		Sound("click");														// Click
		mps.showRoads=e.target.checked;										// Set var
		mps.ShowMapLayers(mps.showRoads);									// Show/hide them
		});
	
	$("#scale").click(function(e) {										// SHOW SCALE?
		Sound("click");														// Click
		mps.showScale=e.target.checked;										// Set var
		mps.ShowMapScale(mps.showScale);									// Show/hide them
		});

	$("#setbaselayer").change(function(e) {								// SET LAYER
		Sound("click");														// Click
		mps.baseLayer=$(this).val();										// Set var
		mps.ShowMapLayers(mps.baseLayer);									// Show/hide them
		});
	
	$("#queryGo").click(function(e) {									// CREATE QUERY
		Sound("click");														// Click
		new SHIVA_QueryEditor($("#querySrc").val(),"","",true,function(q){	// Run query maker
 					$("#containerDiv").height($("#containerDiv").height()*100);
 					q=q.substr(7).replace(/,/g,"+");						// Remove SELECT, add +'s
 					q=q.replace(/<=/g,"LE").replace(/>=/g,"GE").replace(/!=/g,"NE");
					q=q.replace(/</g,"LT").replace(/>/g,"GT").replace(/=/g,"EQ").replace(/has/,"LK");
					});				
		$("#shivaLightBoxDiv").remove();									// Remove calling dialog
		});
}

MapScholar_Shelf.prototype.ToggleExpandCollapse=function()				// EXPAND/COLLAPSE ALL
{
	var i,o,n;
	this.expandAll=!this.expandAll;											// Toggle state
	var n=mps.mobs.length;                            						// Number of mobs
	for (i=0;i<n;++i) {                                                     // For each mob
		o=mps.mobs[i];      												// Point at mob
		if ((o.type == "chapter") || (o.type == "header")) 					// A header													
			o.status=this.expandAll?"closed":"open";						// Set status
		}
	this.Draw();															// Draw shelf
	mps.ShowMapBoxes(-1,"on");												// Show visible boxes
}

MapScholar_Shelf.prototype.DrawInfoPanel=function(mode)					// SET INFOPANEL
{
	var str="";
	var o=mps.mobs[Math.max(mps.sh.curMob,0)];								// Point at mob
	if (this.presentMode == "Book") { 										// Book mode
		o=mps.mobs[this.curBookMob];										// Point at underlying mob, not page
		}
	$("#infoPanelText").html("");											// Clear text
	if ((mode == "cite") && Math.abs($("#containerDiv").width()-mapWid) > 25) // If panel is already open in cite
		mode="close";														// Close it
	if (mode == "close") {													// If closing
		$("#containerDiv").width(mapWid);									// Full size
		$("#infoPanelDiv").hide();											// Hide info panel
		return;
		}
	if (this.presentMode == "Slides") {										// Present mode
		$("#containerDiv").width(0);										// Hide GEF
		$("#infoPanelDiv").css({left:"20px",width:(mapWid-300)+"px"});		// Resize infobox
		$("#infoPanelText").css({width:(mapWid-401)+"px","padding-left":"200px","padding-right":"200px","padding-top":"16px"});	// Resize textbox
		}
	else{	
//		$("#containerDiv").width(mapWid-300);								// Half size
		$("#infoPanelDiv").css({left:(mapWid-280)+"px",width:"300px"});		// Resize infobox
		$("#infoPanelText").css({width:"284px","padding":"8px"}); 			// Resize textbox
		}
	$("#infoPanelDiv").show();												// Show info panel
	str="<img src='closedot.gif' style='position:relative;cursor:pointer;left:calc(100% - 15px)' onclick='mps.sh.DrawInfoPanel(\"close\")'>"
	if (o.title) {															// If it has a title
		str+="<b>"+o.title;													// Add it
		if (o.start) {														// If a start set
			str+="<span style='color:#990000'>";							// Red
			str+="&nbsp;&nbsp;&nbsp;("+Math.floor(o.start);					// Add it
			if (o.end)														// If an end set
				str+=" - "+o.end;											// Add it
			str+=")</span>";												// Close date paren
			}
		str+="</b><br/><br/>";												// Close title
		}
	if ((o.type == "link") || (o.type == "text")) {							// If a link or text
		if (o.small)														// If an image spec'd 
			str+="<br/><img style='border:1px solid #999' width='300px' src='"+o.small+"'><br/>";		// Add it		
		if (o.url)															// If a link
			str+="<br/>Click <a href='"+o.url+" ' target='_blank'>here</a> for more information<br/><br/>";	// Add it		
		}
	if (o.desc)																// If it has a desc
		str+=o.desc+"<br/><br/>";											// Add it
	if ((o.type == "map") || (mode == "info")) { 							// A map													
		var pic="";															// Assume no pic
		if (o.med)                                                 	   		// If a med defined															
			pic=o.med;														// Use it
		else if (o.url)														// Else if a large defined															
			pic=o.url;														// Use it
		else if (o.small)													// Else if a small defined															
			pic=o.small;													// Use it
		if (pic)															// If a pic
			str+="<img style='border: 1px solid #999' width='100%' src='"+pic+"'>"; // Add it
		str+="Map "+o.id+"<br/>";											// Add map id
		}
	if (o.citation)															// If a citation set
		str+="<br/><b>Citation:</b><br/>"+shivaLib.LinkToAnchor(o.citation);	// Add it
	$("#infoPanelText").html(str);											// Set text
}

MapScholar_Shelf.prototype.Play=function(again, chapter)				// PLAY
{
	var _this=mps.sh;														// Point here
	var time=this.playTime;													// Time per mob
	if (!this.inPlay) {														// If not playing
		this.playStart=0;													// Assume playing
		this.playEnd=mps.mobs.length-1;										// all
		if (chapter != undefined) {											// If a chapter spec'd
			this.curMob=this.playStart=chapter;								// Start on chapter
			for (i=chapter-0+1;i<this.playEnd;++i)							// For each mob
				if (mps.mobs[i].type == "chapter") {						// If a new chapter
					this.playEnd=i-1;										// Set end
					break;													// Quit looking
					}
			}
		Sound("click");														// Click
		if (this.playSpeed < 50)											// Slowing down
			time*=((50-this.playSpeed)/10);									// Slow it down
		if (this.playSpeed > 50)											// Speeding up
			time/=((this.playSpeed-50)/10);									// Speed it up
		if (again == "1")													// If starting over
			this.curMob=this.playStart;										// From the top
		this.HighlightMob("next",false,true);								// Start 1st immediately
		this.inPlay=setInterval(function(){_this.HighlightMob("next",false,true)},time);	// Set up timer to play 
		$("#playbut").attr("src","img/stopbut.gif");						// Change icon
		$("#playbut").attr("title","Stop");									// Change title
		mps.showBoxes=false;												// Hide boxes
		mps.ShowMapBoxes(-1,"off");											// Hide boxes
		}
	else{																	// If playing
		if (again == "1") { 												// Starting over
			this.curMob=this.playStart;										// From the top
			Sound("click");													// Click
			return;															// Don't stop
			}
		Sound("delete");													// Click
		window.clearInterval(this.inPlay);									// Stop timer
		this.inPlay=null;													// Clear
		$("#playbut").attr("src","img/playbut.gif");						// Change icon
		$("#playbut").attr("title","Play all");								// Change title
		mps.showBoxes=true;													// Show boxes
		mps.ShowMapBoxes(-1,"on");											// Show boxes
		}
}

	function toggleMore()
	{
		$("#moreHead").css("display",$("#moreHead").css("display") == "inline" ? "none" : "inline" );
		$("#moreText").css("display",$("#moreText").css("display") == "inline" ? "none" : "inline" );
	}


//////////////////////////////////////////////////////////////////////////////////////////////////
// NEW ADDITIONS FOR OL
/////////////////////////////////////////////////////////////////////////////////////////////////

	function RangeToResolution(range, width)							// GOOGLE EARTH RANGLE TO OPENLAYERS RESOLUTION
	{
		return((Math.tan(75*(Math.PI/360))*range*2)/(width));				// Code from Shane Lin 
	}

	function ResolutionToRange(resolution, width)						// OPENLAYERS RESOLUTION TO GOOGLE EARTH RANGLE
	{
		return((resolution*(width))/(2*Math.tan(75*(Math.PI/360))));		// Code from Shane Lin 
	}

	function ValidCenter(c)												// MAKE SURE COORDS STAY IN MAIN MAP COORD SPACE
  	{
 		return c;															// Return valid coord
  	 	c=ol.proj.transform(c, mps.curProjection,'EPSG:4326' );				// Project
	 	c[0]=c[0]%180;														// Keep -180 to 180 degrees
 	 	c=ol.proj.transform(c, 'EPSG:4326',mps.curProjection );				// Project back
	}	

	function Hex2RGBAString(col, alpha)
	{	
		var r=0,g=0,b=0,
		alpha=alpha/100;
		if (col) {																
			r=parseInt(col.substr(1,2),16);
			g=parseInt(col.substr(3,2),16);
			b=parseInt(col.substr(5,2),16);
			}
		return("rgba("+r+","+g+","+b+","+alpha+")");
	}
	
MapScholar.prototype.MakeMapImage=function(mob) 						// ADD MAP IMAGE TO PROJECT
{    
    mob.mapImage=new MapImage(mob);											// Alloc mapimage obj

	function MapImage(mob) {												// MAPIMAGE CONSTRUCTOR
	    this.img=new Image();												// Alloc image
		
		function progress() {												// SHOW LOAD PROGRESS
         	var str="";
         	mps.loadCounter--; 												// Dec
       		if (mps.loadCounter)											// If stuff to load
 				str=mps.loadCounter+" maps to load";						// Set progress
 			$("#loadProgress").text(str);									// Show status
        	}					

	    this.img.onload=progress;											// Add handler to remove from count after loaded
        this.img.onerror=progress;											// Add handler to remove from count if error
        this.imgWidth;	 this.imgHeight;									// Set size, if any
        this.n=mob.north-0;													// Set bounds
        this.s=mob.south-0;
        this.e=mob.east-0;
        this.w=mob.west-0;
        var ne = ol.proj.transform([this.e, this.n], 'EPSG:4326', mps.curProjection);	// Project
        var sw = ol.proj.transform([this.w, this.s], 'EPSG:4326', mps.curProjection);
        this.north = ne[1];
        this.south = sw[1];
        this.east = ne[0];
        this.west = sw[0];
        this.centerXCoord = this.w + (Math.abs(this.e - this.w) / 2);
        this.centerYCoord = this.s + (Math.abs(this.n - this.s) / 2);
        this.center=ol.proj.transform([this.centerXCoord, this.centerYCoord], 'EPSG:4326', mps.curProjection);	// Get center
        this.rotation=mob.rotation*-1;										// Reverse direction
		if (mob.med)														// If a medium available
			this.img.src=mob.med;											// Set url
		else if (mob.url)													// If a large
			this.img.src=mob.url;											// Set url
		else if (mob.small)													// If a small
			this.img.src=mob.small;											// Set url
  	}
	
MapImage.prototype.drawImage=function(alpha)                   			// DRAW IMAGE
{ 
	if (!this.imgWidth) {
		this.imgWidth=this.img.width;
		this.imgHeight=this.img.height;
		this.imgWidthMeters=Math.abs(this.east - this.west);            
		this.imgHeightMeters=Math.abs(this.north - this.south);
		}
	var canvasExtentWidth = mps.canvasExtent[2] - mps.canvasExtent[0];
	var canvasExtentHeight = mps.canvasExtent[3] - mps.canvasExtent[1];
	var xCenterOffset = mps.canvasWidth * (this.center[0]-mps.canvasExtent[0]) / canvasExtentWidth;
	var yCenterOffset = mps.canvasHeight * (mps.canvasExtent[3]-this.center[1]) / canvasExtentHeight;
	var drawWidth = mps.canvasWidth * (this.imgWidthMeters / canvasExtentWidth);
	var drawHeight = mps.canvasHeight * (this.imgHeightMeters / canvasExtentHeight);
	var ctx=mps.canvasContext;
	if (ctx) {
		ctx.globalAlpha = alpha / 100;
		ctx.translate(xCenterOffset,yCenterOffset);
		ctx.rotate(this.rotation * (Math.PI/180));
		ctx.translate(-(drawWidth / 2), -(drawHeight / 2));
		ctx.drawImage(this.img, 0, 0, drawWidth, drawHeight);
		ctx.translate((drawWidth / 2), (drawHeight / 2));
		ctx.rotate(-(this.rotation * (Math.PI / 180)));
		ctx.translate(-xCenterOffset,-yCenterOffset);
		ctx.globalAlpha=1;
		}                  
	}
}
        
MapScholar.prototype.CreateCanvasLayer=function()						// CREATE CANVAS LAYER 
{        
    this.canvasLayer=new ol.layer.Image( {									// Make new image layer
        source: new ol.source.ImageCanvas( {								// Add canvas sourcw
            canvasFunction: function(extent, res, pixelRatio, size, proj) { // Render function
				if (!mps.canvasCanvas) 										// If no canvas yet
			        mps.canvasCanvas=document.createElement('canvas');		// Alloc canvas
		       	mps.canvasWidth=size[0];									// Get width
			    mps.canvasHeight=size[1];									// Hgt
		    	mps.canvasCanvas.setAttribute('width',size[0]);				// Set canvas width
			    mps.canvasCanvas.setAttribute('height',size[1]);			// Hgt
	    		mps.canvasContext=mps.canvasCanvas.getContext('2d');		// Get context
           		mps.canvasExtent=extent;									// Set extent
		        mps.canvasRes=res;											// Set res
				mps.DrawMapImages();										// Make images
	        	return mps.canvasCanvas 									// Return canvas reference
	            }, 
	        projection: this.curProjection									// Projection
	        })
	    });
    map.addLayer(this.canvasLayer);											// Add layer to map
}
    
MapScholar.prototype.DrawMapImages=function()							// DRAW OL MAPS
{
	var i,m;
	if (this.canvasContext && mps.mobs) {  									// If a canvas up      
		this.canvasContext.clearRect(0,0,this.canvasWidth,this.canvasHeight);	// Clear canvas
   		for (i=0;i<mps.mobs.length;i++) {									// For each mob
            m=this.mobs[i];													// Get ptr
            if (m.type != "map" || this.sh.mobVis[i] == 0)					// If not a visible map
                continue;													// Skip it
            if (m.mapImage)													// If an image alloc'd
           		m.mapImage.drawImage(this.sh.mobVis[i]);   					// Draw it   
            }
        }
}


//////////////////////////////////////////////////////////////////////////////////////////////////
// GEO REFERENCE
/////////////////////////////////////////////////////////////////////////////////////////////////


MapScholar.prototype.GeoReferenceMap=function(num)						// GEO REFERENCE MAP
{
	if (num == undefined)													// If mob num not spec'd
		num=mps.sh.curMob;													// Use current one
	else{
		this.sh.mobVis[num]=0												// Hide it
		this.sh.HighlightMob(num,false,true);								// Highlight mob
		}
	if (mps.geoRef) {														// If geo referencing left open
		if (mps.geoRef.modify)												// If interaction initted													
			map.removeInteraction(mps.geoRef.modify);						// Remove it
		mps.drawLayer.getFeatures().clear();								// Clear existing points
		map.unByKey(mps.geoRef.pDrag)										// Remove drag handler
		map.unByKey(mps.geoRef.pUp)											// Remove mouse up handler
		}
	var o=this.geoRef={};													// Holds params												
	if (!this.drawLayer) {													// If not defined yet
		this.drawLayer=new ol.FeatureOverlay({ source: new ol.source.Vector() } );	// Feature overlay for georef
		this.drawLayer.setMap(map);												// Add to map
		}
	var mob=this.mobs[num];													// Get mob
	if (!mob.north) {														// If no coords yet
		var asp=0;
		if (mob.mapImage && mob.mapImage.img && mob.mapImage.img.naturalWidth)	// If image is loaded		
			asp=mob.mapImage.img.naturalHeight/mob.mapImage.img.naturalWidth;	// Calc image aspect
		if (!asp)															// If no aspect
			asp=.75;														// Assume 4/3
		var bot=(mapHgt*.25)+(mapWid*.5*asp);
		var nw=map.getCoordinateFromPixel([mapWid*.25,mapHgt*.25]);			// NW corner
		var se=map.getCoordinateFromPixel([mapWid*.75,bot]);				// SE corner
		nw=ol.proj.transform(nw,mps.curProjection,"EPSG:4326"); 			// Project coord
		se=ol.proj.transform(se,mps.curProjection,"EPSG:4326"); 			// Project 
		mob.north=nw[1];													// Set N
		mob.south=se[1];													// Set S
		mob.east=se[0];														// Set E
		mob.west=nw[0];														// Set W
		mps.MakeMapImage(mob);												// Reset map image
		mps.DrawMapImages();												// Draw map images
		
		}
	o.asp=(mob.north-mob.south)/(mob.east-mob.west);						// Calc image asp
	SetControlDots(true);													// Starter dots
	var str="<br> &nbsp; &nbsp; Rotation &nbsp;&nbsp; <span id='geoRot1' style='width:360px;display:inline-block'></span>&nbsp;&nbsp;";
	str+="Fine rotation &nbsp;&nbsp; <span id='geoRot2' style='width:200px;display:inline-block'></span>";
	str+=" &nbsp; &nbsp; Value &nbsp; <input type='text' class='is' id='geoRot3' style='font-size:10px;width:60px;display:inline-block;border-radius:10px;text-align:center'>";
	$("#controlBarDiv").html(str)										// Add to DOM

	var ops={ min:0, max:360, value:Math.floor(mob.rotation), slide:function(event,ui) {	// Gross slider options
		mob.rotation=ui.value;											// Set degrees
		$("#geoRot2").slider("value",0);								// Reset fine
		$("#geoRot3").val(mob.rotation);								// Init text input
		ReDrawImage();													// Redraw image
		}};
	$("#geoRot1").slider(ops);											// Init gross slider

	var ops={ min:0, max:1, step:0.001, value:mob.rotation-Math.floor(mob.rotation), slide:function(event,ui) {	// Gross slider options
		mob.rotation=$("#geoRot1").slider("value")+ui.value;			// Set degrees
		$("#geoRot3").val(mob.rotation);								// Init text input
		ReDrawImage();													// Redraw image
		}};

	$("#geoRot2").slider(ops);											// Init fine slider
	$("#geoRot3").val(mob.rotation);									// Init text input
	$("#geoRot3").on("change", function(e) {							// On typed value
		mob.rotation=Math.min($("#geoRot3").val(),360);					// Set degrees		
		$("#geoRot1").slider("value",Math.floor(mob.rotation));			// Set gross
		$("#geoRot2").slider("value",mob.rotation-Math.floor(mob.rotation)); // Set fine
		ReDrawImage();													// Redraw image
		});

	function ReDrawImage()											// REDRAW MAP
	{
		mps.MakeMapImage(mob);											// Reset map image
		mps.DrawMapImages();											// Draw map images
		SetControlDots(true);											// Reset control dots
		var str=mob.north+"|"+mob.south+"|"+mob.east+"|"+mob.west+"|"+mob.rotation;
		SendShivaMessage("MapScholar=rectify",str);						// Send rectify position to mapedit
	}

	o.pUp=shivaLib.map.on('pointerup',function(e) {						// ON MOUSE UP
		if (mps.geoRef) 												// If geo referencing
			ReDrawImage();												// Redraw image
			});															 

	o.pDrag=shivaLib.map.on('pointerdrag',function(e) {					// ON MOUSE DRAG
		if (mps.geoRef) {													// If geo referencing
			var id;
			var shift=ol.events.condition.shiftKeyOnly(e);					// Shift key status
			var p=ol.proj.transform(e.coordinate,mps.curProjection,"EPSG:4326"); // Project cur coord
			map.forEachFeatureAtPixel(e.pixel,function(f) {					// Look at features
				id=f.getId();												// Get id of feature
				if (id == "georef0") {										// Move all dots
					var w=Math.abs(mob.east-mob.west)/2;					// Get width
					var h=Math.abs(mob.north-mob.south)/2;					// Get width
					mob.west=p[0]-w;										// Set W
					mob.east=p[0]+w;										// Set E
					mob.north=p[1]+h;										// Set N
					mob.south=p[1]-h;										// Set S
					}
				else if (id == "georef1") {									// SW
					mob.west=p[0];											// Set W
					if (shift)												// If shift key											
						mob.south=p[1];										// Distort aspect
					else													// Preserving aspect
						mob.north=((mob.east-mob.west)*o.asp)+(mob.south-0); // Set based on width and aspect
					}
				else if (id == "georef2") {									// NE
					mob.east=p[0];											// Set E
					if (shift)												// If shift key											
						mob.south=p[1];										// Distort aspect
					else													// Preserving aspect
						mob.north=((mob.east-mob.west)*o.asp)+(mob.south-0);// Set based on width and aspect
					}
				else if (id == "georef3") {									// SE
					mob.east=p[0];											// Set E
					if (shift)												// If shift key											
						mob.north=p[1];										// Distort aspect
					else													// Preserving aspect
						mob.south=mob.north-((mob.east-mob.west)*o.asp);	// Set based on width and aspect
						}
				else if (id == "georef4") {									// SW
					mob.west=p[0];											// Set W
					if (shift)												// If shift key											
						mob.north=p[1];										// Distort aspect
					else													// Preserving aspect
						mob.south=mob.north-((mob.east-mob.west)*o.asp);	// Set based on width and aspect
					}
				});															// Each feature
			}
		});															 
	
	}
	
	function SetControlDots(init)										// SET GEO REFEENCE CONTROL DOTS
	{
		var i,p=[];
		if (mps.sh.curMob == -1)											// If no mob selected
			return;															// Quit
		var o=mps.geoRef;													// Point at georef data
		
		if (o.modify)														// If interaction initted													
			map.removeInteraction(o.modify);								// Remove it
		map.addInteraction( o.modify=new ol.interaction.Modify({			// Add modify interaction
 						features: mps.drawLayer.getFeatures()				// Point at features
						})
			);

		var mob=mps.mobs[mps.sh.curMob];									// Get mob	
		if (mob.type != "map")												// If not a map
			return;															// Quit
		if (init) {															// If initting
			o.pts=[{},{},{},{},{}];											// Holds dots
			mps.drawLayer.getFeatures().clear();							// Clear existing points
			var sty=new ol.style.Style({									// Create  dot style
		     	image: new ol.style.Circle({								// Circle
		     		radius:8,												// Size
					fill: new ol.style.Fill({								// Fill						
						color: "rgba(230,120,30,0.7)"	     				// Orange
		   				})
			   		})
				})
			}
		
		o.pts[0].x=mob.west+Math.abs(mob.east-mob.west)/2;					// CX
		o.pts[0].y=mob.south+Math.abs(mob.north-mob.south)/2;				// CY
		o.pts[1].x=mob.west-0;	o.pts[1].y=mob.north-0;						// NW
		o.pts[2].x=mob.east-0;	o.pts[2].y=mob.north-0;						// NE
		o.pts[3].x=mob.east-0;	o.pts[3].y=mob.south-0;						// SE
		o.pts[4].x=mob.west-0;	o.pts[4].y=mob.south-0;						// SW
				
		var ar=mob.rotation*Math.PI/180.0;									// Angle to radians
		var sin=Math.sin(ar);												// Get sine
		var cos=Math.cos(ar);												// Get cosine
		var cx=o.pts[0].x;													// Center x
		var cy=o.pts[0].y;													// Center x

		for (i=0;i<5;++i) {													// For each dot
 			p[0]=cx+(o.pts[i].x-cx)*cos-(cy-o.pts[i].y)*sin;				// Rotate x
			p[1]=cy+(o.pts[i].x-cx)*sin+(cy-o.pts[i].y)*cos;				// Rotate y
		   	p=ol.proj.transform(p,"EPSG:4326",mps.curProjection);			// Project
  			if (init) {														// If initting dots
				o.pts[i].f=new ol.Feature(new ol.geom.Point(p));			// Add feature
				o.pts[i].f.setId("georef"+i);								// Add id
				o.pts[i].f.setStyle(sty);									// Set feature
				mps.drawLayer.addFeature(o.pts[i].f);						// Add feature to layer
				}
			else															// Just moving them
				o.pts[i].f.getGeometry().setCoordinates(p);					// Set geometry
			}
	}

	function ShowIframe2(left, top, wid, hgt, url, id, mode, content)
	{
		$("#"+id).remove();															
		$("#CL-"+id).remove();															
		if ((hgt == 0) || (wid == 0))
			return;
		if (url && url.match(/flickr.com/i)) {																// Flickr's new regime
			var	str="<img id='"+id+"' src='"+url+"' style='position:absolute;"; 					
			str+="width:"+(wid+2)+"px;height:"+(hgt+2)+"px;left:"+left+"px;top:"+top+"px;'>";
			$("body").append(str);	
			return;
			}
		var	str="<iframe id='"+id+"' ";
		if (url)
			str+="src='"+url+"' ";
		str+="style='position:absolute;"; 					
		if (mode == "black")
			str+="border:none;background:black;"
		else if (mode == "transparent")
			str+="border:none;background:transparent;"
		else
			str+="background:white;"
		str+="width:"+(wid+2)+"px;height:"+(hgt+2)+"px;left:"+left+"px;top:"+top+"px;'";
		if (mode == "black")
			str+=" scrolling='no'";
		else if (mode == "transparent")
			str+=" allowtransparency='true'";
		$("body").append(str+"></iframe>");	
		str="<iframe marginwidth='0' marginheight='0' src='closedot.gif' id='CL-"+id+"' style='position:absolute;margin:0px;padding:0px;border:none;"; 					
		str+="width:17px;height:18px;left:"+(wid-13+left)+"px;top:"+(top+3)+"px'/>";
		if (mode != "black")
			$("body").append(str);	

		$("#"+id).bind("load",function(e) {
			if (content)
				this.contentWindow.document.body.innerHTML=content;
		});
		$("#CL-"+id).bind("load",function(e) {
			this.contentWindow.document.body.onclick=function(e) {
			shivaLib.Sound("delete");
			$("#"+id).remove();															
			$("#CL-"+id).remove();															
		}});
	}	


</script>
</body>
</html>
